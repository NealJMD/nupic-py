# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.36
#
# Don't modify this file, modify the SWIG interface instead.

import _engine_internal
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


# ----------------------------------------------------------------------
# Numenta Platform for Intelligent Computing (NuPIC)
# Copyright (C) 2013, Numenta, Inc.  Unless you have purchased from
# Numenta, Inc. a separate commercial license for this software code, the
# following terms and conditions apply:
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 3 as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see http://www.gnu.org/licenses.
#
# http://numenta.org/licenses/
# ----------------------------------------------------------------------

class PySwigIterator(object):
    """Proxy of C++ PySwigIterator class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _engine_internal.delete_PySwigIterator
    def value(*args, **kwargs):
        """value(self) -> PyObject"""
        return _engine_internal.PySwigIterator_value(*args, **kwargs)

    def incr(*args, **kwargs):
        """incr(self, n=1) -> PySwigIterator"""
        return _engine_internal.PySwigIterator_incr(*args, **kwargs)

    def decr(*args, **kwargs):
        """decr(self, n=1) -> PySwigIterator"""
        return _engine_internal.PySwigIterator_decr(*args, **kwargs)

    def distance(*args, **kwargs):
        """distance(self, x) -> ptrdiff_t"""
        return _engine_internal.PySwigIterator_distance(*args, **kwargs)

    def equal(*args, **kwargs):
        """equal(self, x) -> bool"""
        return _engine_internal.PySwigIterator_equal(*args, **kwargs)

    def copy(*args, **kwargs):
        """copy(self) -> PySwigIterator"""
        return _engine_internal.PySwigIterator_copy(*args, **kwargs)

    def next(*args, **kwargs):
        """next(self) -> PyObject"""
        return _engine_internal.PySwigIterator_next(*args, **kwargs)

    def previous(*args, **kwargs):
        """previous(self) -> PyObject"""
        return _engine_internal.PySwigIterator_previous(*args, **kwargs)

    def advance(*args, **kwargs):
        """advance(self, n) -> PySwigIterator"""
        return _engine_internal.PySwigIterator_advance(*args, **kwargs)

    def __eq__(*args, **kwargs):
        """__eq__(self, x) -> bool"""
        return _engine_internal.PySwigIterator___eq__(*args, **kwargs)

    def __ne__(*args, **kwargs):
        """__ne__(self, x) -> bool"""
        return _engine_internal.PySwigIterator___ne__(*args, **kwargs)

    def __iadd__(*args, **kwargs):
        """__iadd__(self, n) -> PySwigIterator"""
        return _engine_internal.PySwigIterator___iadd__(*args, **kwargs)

    def __isub__(*args, **kwargs):
        """__isub__(self, n) -> PySwigIterator"""
        return _engine_internal.PySwigIterator___isub__(*args, **kwargs)

    def __add__(*args, **kwargs):
        """__add__(self, n) -> PySwigIterator"""
        return _engine_internal.PySwigIterator___add__(*args, **kwargs)

    def __sub__(*args):
        """
        __sub__(self, n) -> PySwigIterator
        __sub__(self, x) -> ptrdiff_t
        """
        return _engine_internal.PySwigIterator___sub__(*args)

    def __iter__(self): return self
PySwigIterator_swigregister = _engine_internal.PySwigIterator_swigregister
PySwigIterator_swigregister(PySwigIterator)

class StringVec(object):
    """Proxy of C++ StringVec class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def iterator(*args, **kwargs):
        """iterator(self, PYTHON_SELF) -> PySwigIterator"""
        return _engine_internal.StringVec_iterator(*args, **kwargs)

    def __iter__(self): return self.iterator()
    def __nonzero__(*args, **kwargs):
        """__nonzero__(self) -> bool"""
        return _engine_internal.StringVec___nonzero__(*args, **kwargs)

    def __len__(*args, **kwargs):
        """__len__(self) -> size_type"""
        return _engine_internal.StringVec___len__(*args, **kwargs)

    def pop(*args, **kwargs):
        """pop(self) -> value_type"""
        return _engine_internal.StringVec_pop(*args, **kwargs)

    def __getslice__(*args, **kwargs):
        """__getslice__(self, i, j) -> StringVec"""
        return _engine_internal.StringVec___getslice__(*args, **kwargs)

    def __setslice__(*args, **kwargs):
        """__setslice__(self, i, j, v)"""
        return _engine_internal.StringVec___setslice__(*args, **kwargs)

    def __delslice__(*args, **kwargs):
        """__delslice__(self, i, j)"""
        return _engine_internal.StringVec___delslice__(*args, **kwargs)

    def __delitem__(*args, **kwargs):
        """__delitem__(self, i)"""
        return _engine_internal.StringVec___delitem__(*args, **kwargs)

    def __getitem__(*args, **kwargs):
        """__getitem__(self, i) -> value_type"""
        return _engine_internal.StringVec___getitem__(*args, **kwargs)

    def __setitem__(*args, **kwargs):
        """__setitem__(self, i, x)"""
        return _engine_internal.StringVec___setitem__(*args, **kwargs)

    def append(*args, **kwargs):
        """append(self, x)"""
        return _engine_internal.StringVec_append(*args, **kwargs)

    def empty(*args, **kwargs):
        """empty(self) -> bool"""
        return _engine_internal.StringVec_empty(*args, **kwargs)

    def size(*args, **kwargs):
        """size(self) -> size_type"""
        return _engine_internal.StringVec_size(*args, **kwargs)

    def clear(*args, **kwargs):
        """clear(self)"""
        return _engine_internal.StringVec_clear(*args, **kwargs)

    def swap(*args, **kwargs):
        """swap(self, v)"""
        return _engine_internal.StringVec_swap(*args, **kwargs)

    def get_allocator(*args, **kwargs):
        """get_allocator(self) -> allocator_type"""
        return _engine_internal.StringVec_get_allocator(*args, **kwargs)

    def begin(*args, **kwargs):
        """begin(self) -> const_iterator"""
        return _engine_internal.StringVec_begin(*args, **kwargs)

    def end(*args, **kwargs):
        """end(self) -> const_iterator"""
        return _engine_internal.StringVec_end(*args, **kwargs)

    def rbegin(*args, **kwargs):
        """rbegin(self) -> const_reverse_iterator"""
        return _engine_internal.StringVec_rbegin(*args, **kwargs)

    def rend(*args, **kwargs):
        """rend(self) -> const_reverse_iterator"""
        return _engine_internal.StringVec_rend(*args, **kwargs)

    def pop_back(*args, **kwargs):
        """pop_back(self)"""
        return _engine_internal.StringVec_pop_back(*args, **kwargs)

    def erase(*args):
        """
        erase(self, pos) -> iterator
        erase(self, first, last) -> iterator
        """
        return _engine_internal.StringVec_erase(*args)

    def __init__(self, *args): 
        """
        __init__(self) -> StringVec
        __init__(self, ?) -> StringVec
        __init__(self, size) -> StringVec
        __init__(self, size, value) -> StringVec
        """
        this = _engine_internal.new_StringVec(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(*args, **kwargs):
        """push_back(self, x)"""
        return _engine_internal.StringVec_push_back(*args, **kwargs)

    def front(*args, **kwargs):
        """front(self) -> value_type"""
        return _engine_internal.StringVec_front(*args, **kwargs)

    def back(*args, **kwargs):
        """back(self) -> value_type"""
        return _engine_internal.StringVec_back(*args, **kwargs)

    def assign(*args, **kwargs):
        """assign(self, n, x)"""
        return _engine_internal.StringVec_assign(*args, **kwargs)

    def resize(*args):
        """
        resize(self, new_size)
        resize(self, new_size, x)
        """
        return _engine_internal.StringVec_resize(*args)

    def insert(*args):
        """
        insert(self, pos, x) -> iterator
        insert(self, pos, n, x)
        """
        return _engine_internal.StringVec_insert(*args)

    def reserve(*args, **kwargs):
        """reserve(self, n)"""
        return _engine_internal.StringVec_reserve(*args, **kwargs)

    def capacity(*args, **kwargs):
        """capacity(self) -> size_type"""
        return _engine_internal.StringVec_capacity(*args, **kwargs)

    __swig_destroy__ = _engine_internal.delete_StringVec
StringVec_swigregister = _engine_internal.StringVec_swigregister
StringVec_swigregister(StringVec)

NTA_BasicType_Byte = _engine_internal.NTA_BasicType_Byte
NTA_BasicType_Int16 = _engine_internal.NTA_BasicType_Int16
NTA_BasicType_UInt16 = _engine_internal.NTA_BasicType_UInt16
NTA_BasicType_Int32 = _engine_internal.NTA_BasicType_Int32
NTA_BasicType_UInt32 = _engine_internal.NTA_BasicType_UInt32
NTA_BasicType_Int64 = _engine_internal.NTA_BasicType_Int64
NTA_BasicType_UInt64 = _engine_internal.NTA_BasicType_UInt64
NTA_BasicType_Real32 = _engine_internal.NTA_BasicType_Real32
NTA_BasicType_Real64 = _engine_internal.NTA_BasicType_Real64
NTA_BasicType_Handle = _engine_internal.NTA_BasicType_Handle
NTA_BasicType_Last = _engine_internal.NTA_BasicType_Last
NTA_BasicType_Real = _engine_internal.NTA_BasicType_Real
NTA_REAL_TYPE_STRING = _engine_internal.NTA_REAL_TYPE_STRING
NTA_LogLevel_None = _engine_internal.NTA_LogLevel_None
NTA_LogLevel_Minimal = _engine_internal.NTA_LogLevel_Minimal
NTA_LogLevel_Normal = _engine_internal.NTA_LogLevel_Normal
NTA_LogLevel_Verbose = _engine_internal.NTA_LogLevel_Verbose
LogLevel_None = _engine_internal.LogLevel_None
LogLevel_Minimal = _engine_internal.LogLevel_Minimal
LogLevel_Normal = _engine_internal.LogLevel_Normal
LogLevel_Verbose = _engine_internal.LogLevel_Verbose
class BasicType(object):
    """Proxy of C++ BasicType class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def isValid(*args, **kwargs):
        """isValid(t) -> bool"""
        return _engine_internal.BasicType_isValid(*args, **kwargs)

    isValid = staticmethod(isValid)
    def getName(*args, **kwargs):
        """getName(t) -> char"""
        return _engine_internal.BasicType_getName(*args, **kwargs)

    getName = staticmethod(getName)
    def getSize(*args, **kwargs):
        """getSize(t) -> size_t"""
        return _engine_internal.BasicType_getSize(*args, **kwargs)

    getSize = staticmethod(getSize)
    def parse(*args, **kwargs):
        """parse(s) -> NTA_BasicType"""
        return _engine_internal.BasicType_parse(*args, **kwargs)

    parse = staticmethod(parse)
    __swig_destroy__ = _engine_internal.delete_BasicType
BasicType_swigregister = _engine_internal.BasicType_swigregister
BasicType_swigregister(BasicType)

def BasicType_isValid(*args, **kwargs):
  """BasicType_isValid(t) -> bool"""
  return _engine_internal.BasicType_isValid(*args, **kwargs)

def BasicType_getName(*args, **kwargs):
  """BasicType_getName(t) -> char"""
  return _engine_internal.BasicType_getName(*args, **kwargs)

def BasicType_getSize(*args, **kwargs):
  """BasicType_getSize(t) -> size_t"""
  return _engine_internal.BasicType_getSize(*args, **kwargs)

def BasicType_parse(*args, **kwargs):
  """BasicType_parse(s) -> NTA_BasicType"""
  return _engine_internal.BasicType_parse(*args, **kwargs)

class Exception(object):
    """Proxy of C++ Exception class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        """__init__(self, filename, lineno, message, stacktrace="") -> Exception"""
        this = _engine_internal.new_Exception(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _engine_internal.delete_Exception
    def what(*args, **kwargs):
        """what(self) -> char"""
        return _engine_internal.Exception_what(*args, **kwargs)

    def getFilename(*args, **kwargs):
        """getFilename(self) -> char"""
        return _engine_internal.Exception_getFilename(*args, **kwargs)

    def getLineNumber(*args, **kwargs):
        """getLineNumber(self) -> UInt32"""
        return _engine_internal.Exception_getLineNumber(*args, **kwargs)

    def getMessage(*args, **kwargs):
        """getMessage(self) -> char"""
        return _engine_internal.Exception_getMessage(*args, **kwargs)

    def getStackTrace(*args, **kwargs):
        """getStackTrace(self) -> char"""
        return _engine_internal.Exception_getStackTrace(*args, **kwargs)

Exception_swigregister = _engine_internal.Exception_swigregister
Exception_swigregister(Exception)

class UInt32Set(object):
    """Proxy of C++ UInt32Set class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def iterator(*args, **kwargs):
        """iterator(self, PYTHON_SELF) -> PySwigIterator"""
        return _engine_internal.UInt32Set_iterator(*args, **kwargs)

    def __iter__(self): return self.iterator()
    def __nonzero__(*args, **kwargs):
        """__nonzero__(self) -> bool"""
        return _engine_internal.UInt32Set___nonzero__(*args, **kwargs)

    def __len__(*args, **kwargs):
        """__len__(self) -> std::set<(unsigned int)>::size_type"""
        return _engine_internal.UInt32Set___len__(*args, **kwargs)

    def append(*args, **kwargs):
        """append(self, x)"""
        return _engine_internal.UInt32Set_append(*args, **kwargs)

    def __contains__(*args, **kwargs):
        """__contains__(self, x) -> bool"""
        return _engine_internal.UInt32Set___contains__(*args, **kwargs)

    def __getitem__(*args, **kwargs):
        """__getitem__(self, i) -> std::set<(unsigned int)>::value_type"""
        return _engine_internal.UInt32Set___getitem__(*args, **kwargs)

    def __init__(self, *args): 
        """
        __init__(self, ?) -> UInt32Set
        __init__(self) -> UInt32Set
        __init__(self, ?) -> UInt32Set
        """
        this = _engine_internal.new_UInt32Set(*args)
        try: self.this.append(this)
        except: self.this = this
    def empty(*args, **kwargs):
        """empty(self) -> bool"""
        return _engine_internal.UInt32Set_empty(*args, **kwargs)

    def size(*args, **kwargs):
        """size(self) -> std::set<(unsigned int)>::size_type"""
        return _engine_internal.UInt32Set_size(*args, **kwargs)

    def clear(*args, **kwargs):
        """clear(self)"""
        return _engine_internal.UInt32Set_clear(*args, **kwargs)

    def swap(*args, **kwargs):
        """swap(self, v)"""
        return _engine_internal.UInt32Set_swap(*args, **kwargs)

    def count(*args, **kwargs):
        """count(self, x) -> std::set<(unsigned int)>::size_type"""
        return _engine_internal.UInt32Set_count(*args, **kwargs)

    def begin(*args, **kwargs):
        """begin(self) -> std::set<(unsigned int)>::iterator"""
        return _engine_internal.UInt32Set_begin(*args, **kwargs)

    def end(*args, **kwargs):
        """end(self) -> std::set<(unsigned int)>::iterator"""
        return _engine_internal.UInt32Set_end(*args, **kwargs)

    def rbegin(*args, **kwargs):
        """rbegin(self) -> std::set<(unsigned int)>::reverse_iterator"""
        return _engine_internal.UInt32Set_rbegin(*args, **kwargs)

    def rend(*args, **kwargs):
        """rend(self) -> std::set<(unsigned int)>::reverse_iterator"""
        return _engine_internal.UInt32Set_rend(*args, **kwargs)

    def erase(*args):
        """
        erase(self, x) -> std::set<(unsigned int)>::size_type
        erase(self, pos)
        erase(self, first, last)
        """
        return _engine_internal.UInt32Set_erase(*args)

    def find(*args, **kwargs):
        """find(self, x) -> std::set<(unsigned int)>::iterator"""
        return _engine_internal.UInt32Set_find(*args, **kwargs)

    def lower_bound(*args, **kwargs):
        """lower_bound(self, x) -> std::set<(unsigned int)>::iterator"""
        return _engine_internal.UInt32Set_lower_bound(*args, **kwargs)

    def upper_bound(*args, **kwargs):
        """upper_bound(self, x) -> std::set<(unsigned int)>::iterator"""
        return _engine_internal.UInt32Set_upper_bound(*args, **kwargs)

    def equal_range(*args, **kwargs):
        """equal_range(self, x) -> std::pair<(std::set<(unsigned int)>::iterator,std::set<(unsigned int)>::iterator)>"""
        return _engine_internal.UInt32Set_equal_range(*args, **kwargs)

    def insert(*args, **kwargs):
        """insert(self, __x) -> std::pair<(std::set<(unsigned int)>::iterator,bool)>"""
        return _engine_internal.UInt32Set_insert(*args, **kwargs)

    __swig_destroy__ = _engine_internal.delete_UInt32Set
UInt32Set_swigregister = _engine_internal.UInt32Set_swigregister
UInt32Set_swigregister(UInt32Set)

class Dimset(object):
    """Proxy of C++ Dimset class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def iterator(*args, **kwargs):
        """iterator(self, PYTHON_SELF) -> PySwigIterator"""
        return _engine_internal.Dimset_iterator(*args, **kwargs)

    def __iter__(self): return self.iterator()
    def __nonzero__(*args, **kwargs):
        """__nonzero__(self) -> bool"""
        return _engine_internal.Dimset___nonzero__(*args, **kwargs)

    def __len__(*args, **kwargs):
        """__len__(self) -> size_type"""
        return _engine_internal.Dimset___len__(*args, **kwargs)

    def pop(*args, **kwargs):
        """pop(self) -> value_type"""
        return _engine_internal.Dimset_pop(*args, **kwargs)

    def __getslice__(*args, **kwargs):
        """__getslice__(self, i, j) -> Dimset"""
        return _engine_internal.Dimset___getslice__(*args, **kwargs)

    def __setslice__(*args, **kwargs):
        """__setslice__(self, i, j, v)"""
        return _engine_internal.Dimset___setslice__(*args, **kwargs)

    def __delslice__(*args, **kwargs):
        """__delslice__(self, i, j)"""
        return _engine_internal.Dimset___delslice__(*args, **kwargs)

    def __delitem__(*args, **kwargs):
        """__delitem__(self, i)"""
        return _engine_internal.Dimset___delitem__(*args, **kwargs)

    def __getitem__(*args, **kwargs):
        """__getitem__(self, i) -> value_type"""
        return _engine_internal.Dimset___getitem__(*args, **kwargs)

    def __setitem__(*args, **kwargs):
        """__setitem__(self, i, x)"""
        return _engine_internal.Dimset___setitem__(*args, **kwargs)

    def append(*args, **kwargs):
        """append(self, x)"""
        return _engine_internal.Dimset_append(*args, **kwargs)

    def empty(*args, **kwargs):
        """empty(self) -> bool"""
        return _engine_internal.Dimset_empty(*args, **kwargs)

    def size(*args, **kwargs):
        """size(self) -> size_type"""
        return _engine_internal.Dimset_size(*args, **kwargs)

    def clear(*args, **kwargs):
        """clear(self)"""
        return _engine_internal.Dimset_clear(*args, **kwargs)

    def swap(*args, **kwargs):
        """swap(self, v)"""
        return _engine_internal.Dimset_swap(*args, **kwargs)

    def get_allocator(*args, **kwargs):
        """get_allocator(self) -> allocator_type"""
        return _engine_internal.Dimset_get_allocator(*args, **kwargs)

    def begin(*args, **kwargs):
        """begin(self) -> const_iterator"""
        return _engine_internal.Dimset_begin(*args, **kwargs)

    def end(*args, **kwargs):
        """end(self) -> const_iterator"""
        return _engine_internal.Dimset_end(*args, **kwargs)

    def rbegin(*args, **kwargs):
        """rbegin(self) -> const_reverse_iterator"""
        return _engine_internal.Dimset_rbegin(*args, **kwargs)

    def rend(*args, **kwargs):
        """rend(self) -> const_reverse_iterator"""
        return _engine_internal.Dimset_rend(*args, **kwargs)

    def pop_back(*args, **kwargs):
        """pop_back(self)"""
        return _engine_internal.Dimset_pop_back(*args, **kwargs)

    def erase(*args):
        """
        erase(self, pos) -> iterator
        erase(self, first, last) -> iterator
        """
        return _engine_internal.Dimset_erase(*args)

    def __init__(self, *args): 
        """
        __init__(self) -> Dimset
        __init__(self, ?) -> Dimset
        __init__(self, size) -> Dimset
        __init__(self, size, value) -> Dimset
        """
        this = _engine_internal.new_Dimset(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(*args, **kwargs):
        """push_back(self, x)"""
        return _engine_internal.Dimset_push_back(*args, **kwargs)

    def front(*args, **kwargs):
        """front(self) -> value_type"""
        return _engine_internal.Dimset_front(*args, **kwargs)

    def back(*args, **kwargs):
        """back(self) -> value_type"""
        return _engine_internal.Dimset_back(*args, **kwargs)

    def assign(*args, **kwargs):
        """assign(self, n, x)"""
        return _engine_internal.Dimset_assign(*args, **kwargs)

    def resize(*args):
        """
        resize(self, new_size)
        resize(self, new_size, x)
        """
        return _engine_internal.Dimset_resize(*args)

    def insert(*args):
        """
        insert(self, pos, x) -> iterator
        insert(self, pos, n, x)
        """
        return _engine_internal.Dimset_insert(*args)

    def reserve(*args, **kwargs):
        """reserve(self, n)"""
        return _engine_internal.Dimset_reserve(*args, **kwargs)

    def capacity(*args, **kwargs):
        """capacity(self) -> size_type"""
        return _engine_internal.Dimset_capacity(*args, **kwargs)

    __swig_destroy__ = _engine_internal.delete_Dimset
Dimset_swigregister = _engine_internal.Dimset_swigregister
Dimset_swigregister(Dimset)

class Dimensions(Dimset):
    """Proxy of C++ Dimensions class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> Dimensions
        __init__(self, v) -> Dimensions
        __init__(self, x) -> Dimensions
        __init__(self, x, y) -> Dimensions
        __init__(self, x, y, z) -> Dimensions
        """
        this = _engine_internal.new_Dimensions(*args)
        try: self.this.append(this)
        except: self.this = this
    def getCount(*args, **kwargs):
        """getCount(self) -> size_t"""
        return _engine_internal.Dimensions_getCount(*args, **kwargs)

    def getDimensionCount(*args, **kwargs):
        """getDimensionCount(self) -> size_t"""
        return _engine_internal.Dimensions_getDimensionCount(*args, **kwargs)

    def getDimension(*args, **kwargs):
        """getDimension(self, index) -> size_t"""
        return _engine_internal.Dimensions_getDimension(*args, **kwargs)

    def isDontcare(*args, **kwargs):
        """isDontcare(self) -> bool"""
        return _engine_internal.Dimensions_isDontcare(*args, **kwargs)

    def isUnspecified(*args, **kwargs):
        """isUnspecified(self) -> bool"""
        return _engine_internal.Dimensions_isUnspecified(*args, **kwargs)

    def isSpecified(*args, **kwargs):
        """isSpecified(self) -> bool"""
        return _engine_internal.Dimensions_isSpecified(*args, **kwargs)

    def isOnes(*args, **kwargs):
        """isOnes(self) -> bool"""
        return _engine_internal.Dimensions_isOnes(*args, **kwargs)

    def isValid(*args, **kwargs):
        """isValid(self) -> bool"""
        return _engine_internal.Dimensions_isValid(*args, **kwargs)

    def toString(*args, **kwargs):
        """toString(self, humanReadable=True) -> string"""
        return _engine_internal.Dimensions_toString(*args, **kwargs)

    def getIndex(*args, **kwargs):
        """getIndex(self, ?) -> size_t"""
        return _engine_internal.Dimensions_getIndex(*args, **kwargs)

    def getCoordinate(*args, **kwargs):
        """getCoordinate(self, ?) -> Coordinate"""
        return _engine_internal.Dimensions_getCoordinate(*args, **kwargs)

    def promote(*args, **kwargs):
        """promote(self, newDimensionality)"""
        return _engine_internal.Dimensions_promote(*args, **kwargs)

    def __eq__(*args, **kwargs):
        """__eq__(self, dims2) -> bool"""
        return _engine_internal.Dimensions___eq__(*args, **kwargs)

    def __ne__(*args, **kwargs):
        """__ne__(self, dims2) -> bool"""
        return _engine_internal.Dimensions___ne__(*args, **kwargs)

    __swig_destroy__ = _engine_internal.delete_Dimensions
Dimensions_swigregister = _engine_internal.Dimensions_swigregister
Dimensions_swigregister(Dimensions)

class Array(object):
    """Proxy of C++ Array class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, type, buffer, count) -> Array
        __init__(self, type) -> Array
        """
        this = _engine_internal.new_Array(*args)
        try: self.this.append(this)
        except: self.this = this
    def invariant(*args, **kwargs):
        """invariant(self)"""
        return _engine_internal.Array_invariant(*args, **kwargs)

    __swig_destroy__ = _engine_internal.delete_Array
Array_swigregister = _engine_internal.Array_swigregister
Array_swigregister(Array)

class ArrayRef(object):
    """Proxy of C++ ArrayRef class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, type, buffer, count) -> ArrayRef
        __init__(self, type) -> ArrayRef
        __init__(self, other) -> ArrayRef
        """
        this = _engine_internal.new_ArrayRef(*args)
        try: self.this.append(this)
        except: self.this = this
    def invariant(*args, **kwargs):
        """invariant(self)"""
        return _engine_internal.ArrayRef_invariant(*args, **kwargs)

    __swig_destroy__ = _engine_internal.delete_ArrayRef
ArrayRef_swigregister = _engine_internal.ArrayRef_swigregister
ArrayRef_swigregister(ArrayRef)

class InputCollection(object):
    """Proxy of C++ InputCollection class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        """__init__(self) -> InputCollection"""
        this = _engine_internal.new_InputCollection(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _engine_internal.delete_InputCollection
    def getCount(*args, **kwargs):
        """getCount(self) -> size_t"""
        return _engine_internal.InputCollection_getCount(*args, **kwargs)

    def getByIndex(*args, **kwargs):
        """getByIndex(self, index) -> InputPair"""
        return _engine_internal.InputCollection_getByIndex(*args, **kwargs)

    def contains(*args, **kwargs):
        """contains(self, name) -> bool"""
        return _engine_internal.InputCollection_contains(*args, **kwargs)

    def getByName(*args, **kwargs):
        """getByName(self, name) -> InputSpec"""
        return _engine_internal.InputCollection_getByName(*args, **kwargs)

    def add(*args, **kwargs):
        """add(self, name, item)"""
        return _engine_internal.InputCollection_add(*args, **kwargs)

    def remove(*args, **kwargs):
        """remove(self, name)"""
        return _engine_internal.InputCollection_remove(*args, **kwargs)

InputCollection_swigregister = _engine_internal.InputCollection_swigregister
InputCollection_swigregister(InputCollection)

class OutputCollection(object):
    """Proxy of C++ OutputCollection class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        """__init__(self) -> OutputCollection"""
        this = _engine_internal.new_OutputCollection(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _engine_internal.delete_OutputCollection
    def getCount(*args, **kwargs):
        """getCount(self) -> size_t"""
        return _engine_internal.OutputCollection_getCount(*args, **kwargs)

    def getByIndex(*args, **kwargs):
        """getByIndex(self, index) -> OutputPair"""
        return _engine_internal.OutputCollection_getByIndex(*args, **kwargs)

    def contains(*args, **kwargs):
        """contains(self, name) -> bool"""
        return _engine_internal.OutputCollection_contains(*args, **kwargs)

    def getByName(*args, **kwargs):
        """getByName(self, name) -> OutputSpec"""
        return _engine_internal.OutputCollection_getByName(*args, **kwargs)

    def add(*args, **kwargs):
        """add(self, name, item)"""
        return _engine_internal.OutputCollection_add(*args, **kwargs)

    def remove(*args, **kwargs):
        """remove(self, name)"""
        return _engine_internal.OutputCollection_remove(*args, **kwargs)

OutputCollection_swigregister = _engine_internal.OutputCollection_swigregister
OutputCollection_swigregister(OutputCollection)

class ParameterCollection(object):
    """Proxy of C++ ParameterCollection class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        """__init__(self) -> ParameterCollection"""
        this = _engine_internal.new_ParameterCollection(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _engine_internal.delete_ParameterCollection
    def getCount(*args, **kwargs):
        """getCount(self) -> size_t"""
        return _engine_internal.ParameterCollection_getCount(*args, **kwargs)

    def getByIndex(*args, **kwargs):
        """getByIndex(self, index) -> ParameterPair"""
        return _engine_internal.ParameterCollection_getByIndex(*args, **kwargs)

    def contains(*args, **kwargs):
        """contains(self, name) -> bool"""
        return _engine_internal.ParameterCollection_contains(*args, **kwargs)

    def getByName(*args, **kwargs):
        """getByName(self, name) -> ParameterSpec"""
        return _engine_internal.ParameterCollection_getByName(*args, **kwargs)

    def add(*args, **kwargs):
        """add(self, name, item)"""
        return _engine_internal.ParameterCollection_add(*args, **kwargs)

    def remove(*args, **kwargs):
        """remove(self, name)"""
        return _engine_internal.ParameterCollection_remove(*args, **kwargs)

ParameterCollection_swigregister = _engine_internal.ParameterCollection_swigregister
ParameterCollection_swigregister(ParameterCollection)

class CommandCollection(object):
    """Proxy of C++ CommandCollection class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        """__init__(self) -> CommandCollection"""
        this = _engine_internal.new_CommandCollection(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _engine_internal.delete_CommandCollection
    def getCount(*args, **kwargs):
        """getCount(self) -> size_t"""
        return _engine_internal.CommandCollection_getCount(*args, **kwargs)

    def getByIndex(*args, **kwargs):
        """getByIndex(self, index) -> CommandPair"""
        return _engine_internal.CommandCollection_getByIndex(*args, **kwargs)

    def contains(*args, **kwargs):
        """contains(self, name) -> bool"""
        return _engine_internal.CommandCollection_contains(*args, **kwargs)

    def getByName(*args, **kwargs):
        """getByName(self, name) -> CommandSpec"""
        return _engine_internal.CommandCollection_getByName(*args, **kwargs)

    def add(*args, **kwargs):
        """add(self, name, item)"""
        return _engine_internal.CommandCollection_add(*args, **kwargs)

    def remove(*args, **kwargs):
        """remove(self, name)"""
        return _engine_internal.CommandCollection_remove(*args, **kwargs)

CommandCollection_swigregister = _engine_internal.CommandCollection_swigregister
CommandCollection_swigregister(CommandCollection)

class RegionCollection(object):
    """Proxy of C++ RegionCollection class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        """__init__(self) -> RegionCollection"""
        this = _engine_internal.new_RegionCollection(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _engine_internal.delete_RegionCollection
    def getCount(*args, **kwargs):
        """getCount(self) -> size_t"""
        return _engine_internal.RegionCollection_getCount(*args, **kwargs)

    def getByIndex(*args, **kwargs):
        """getByIndex(self, index) -> RegionPair"""
        return _engine_internal.RegionCollection_getByIndex(*args, **kwargs)

    def contains(*args, **kwargs):
        """contains(self, name) -> bool"""
        return _engine_internal.RegionCollection_contains(*args, **kwargs)

    def getByName(*args, **kwargs):
        """getByName(self, name) -> Region"""
        return _engine_internal.RegionCollection_getByName(*args, **kwargs)

    def add(*args, **kwargs):
        """add(self, name, item)"""
        return _engine_internal.RegionCollection_add(*args, **kwargs)

    def remove(*args, **kwargs):
        """remove(self, name)"""
        return _engine_internal.RegionCollection_remove(*args, **kwargs)

RegionCollection_swigregister = _engine_internal.RegionCollection_swigregister
RegionCollection_swigregister(RegionCollection)

class NuPIC(object):
    """Proxy of C++ NuPIC class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def init(*args, **kwargs):
        """init()"""
        return _engine_internal.NuPIC_init(*args, **kwargs)

    init = staticmethod(init)
    def shutdown(*args, **kwargs):
        """shutdown()"""
        return _engine_internal.NuPIC_shutdown(*args, **kwargs)

    shutdown = staticmethod(shutdown)
    def isInitialized(*args, **kwargs):
        """isInitialized() -> bool"""
        return _engine_internal.NuPIC_isInitialized(*args, **kwargs)

    isInitialized = staticmethod(isInitialized)
    def __init__(self, *args, **kwargs): 
        """__init__(self) -> NuPIC"""
        this = _engine_internal.new_NuPIC(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _engine_internal.delete_NuPIC
NuPIC_swigregister = _engine_internal.NuPIC_swigregister
NuPIC_swigregister(NuPIC)

def NuPIC_init(*args):
  """NuPIC_init()"""
  return _engine_internal.NuPIC_init(*args)

def NuPIC_shutdown(*args):
  """NuPIC_shutdown()"""
  return _engine_internal.NuPIC_shutdown(*args)

def NuPIC_isInitialized(*args):
  """NuPIC_isInitialized() -> bool"""
  return _engine_internal.NuPIC_isInitialized(*args)

class Network(object):
    """Proxy of C++ Network class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> Network
        __init__(self, path) -> Network
        """
        this = _engine_internal.new_Network(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _engine_internal.delete_Network
    def addRegion(*args, **kwargs):
        """addRegion(self, name, nodeType, nodeParams) -> Region"""
        return _engine_internal.Network_addRegion(*args, **kwargs)

    def addRegionFromBundle(*args, **kwargs):
        """addRegionFromBundle(self, name, nodeType, dimensions, bundlePath, label) -> Region"""
        return _engine_internal.Network_addRegionFromBundle(*args, **kwargs)

    def removeRegion(*args, **kwargs):
        """removeRegion(self, name)"""
        return _engine_internal.Network_removeRegion(*args, **kwargs)

    def link(*args, **kwargs):
        """
        link(self, srcName, destName, linkType, linkParams, srcOutput="", 
            destInput="")
        """
        return _engine_internal.Network_link(*args, **kwargs)

    def removeLink(*args, **kwargs):
        """removeLink(self, srcName, destName, srcOutputName="", destInputName="")"""
        return _engine_internal.Network_removeLink(*args, **kwargs)

    def initialize(*args, **kwargs):
        """initialize(self)"""
        return _engine_internal.Network_initialize(*args, **kwargs)

    def getRegions(*args, **kwargs):
        """getRegions(self) -> RegionCollection"""
        return _engine_internal.Network_getRegions(*args, **kwargs)

    def setPhases(*args, **kwargs):
        """setPhases(self, name, phases)"""
        return _engine_internal.Network_setPhases(*args, **kwargs)

    def getPhases(*args, **kwargs):
        """getPhases(self, name) -> UInt32Set"""
        return _engine_internal.Network_getPhases(*args, **kwargs)

    def getMinPhase(*args, **kwargs):
        """getMinPhase(self) -> UInt32"""
        return _engine_internal.Network_getMinPhase(*args, **kwargs)

    def getMaxPhase(*args, **kwargs):
        """getMaxPhase(self) -> UInt32"""
        return _engine_internal.Network_getMaxPhase(*args, **kwargs)

    def run(*args, **kwargs):
        """run(self, n)"""
        return _engine_internal.Network_run(*args, **kwargs)

    def getCallbacks(*args, **kwargs):
        """getCallbacks(self) -> nta::Collection<(nta::Network::callbackItem)>"""
        return _engine_internal.Network_getCallbacks(*args, **kwargs)

    def setMinEnabledPhase(*args, **kwargs):
        """setMinEnabledPhase(self, minPhase)"""
        return _engine_internal.Network_setMinEnabledPhase(*args, **kwargs)

    def setMaxEnabledPhase(*args, **kwargs):
        """setMaxEnabledPhase(self, minPhase)"""
        return _engine_internal.Network_setMaxEnabledPhase(*args, **kwargs)

    def getMinEnabledPhase(*args, **kwargs):
        """getMinEnabledPhase(self) -> UInt32"""
        return _engine_internal.Network_getMinEnabledPhase(*args, **kwargs)

    def getMaxEnabledPhase(*args, **kwargs):
        """getMaxEnabledPhase(self) -> UInt32"""
        return _engine_internal.Network_getMaxEnabledPhase(*args, **kwargs)

    def save(*args, **kwargs):
        """save(self, name)"""
        return _engine_internal.Network_save(*args, **kwargs)

    def enableProfiling(*args, **kwargs):
        """enableProfiling(self)"""
        return _engine_internal.Network_enableProfiling(*args, **kwargs)

    def disableProfiling(*args, **kwargs):
        """disableProfiling(self)"""
        return _engine_internal.Network_disableProfiling(*args, **kwargs)

    def resetProfiling(*args, **kwargs):
        """resetProfiling(self)"""
        return _engine_internal.Network_resetProfiling(*args, **kwargs)

Network_swigregister = _engine_internal.Network_swigregister
Network_swigregister(Network)

class Region(object):
    """Proxy of C++ Region class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def getNetwork(*args, **kwargs):
        """getNetwork(self) -> Network"""
        return _engine_internal.Region_getNetwork(*args, **kwargs)

    def getName(*args, **kwargs):
        """getName(self) -> string"""
        return _engine_internal.Region_getName(*args, **kwargs)

    def getDimensions(*args, **kwargs):
        """getDimensions(self) -> Dimensions"""
        return _engine_internal.Region_getDimensions(*args, **kwargs)

    def setDimensions(*args, **kwargs):
        """setDimensions(self, dimensions)"""
        return _engine_internal.Region_setDimensions(*args, **kwargs)

    def prepareInputs(*args, **kwargs):
        """prepareInputs(self)"""
        return _engine_internal.Region_prepareInputs(*args, **kwargs)

    def getType(*args, **kwargs):
        """getType(self) -> string"""
        return _engine_internal.Region_getType(*args, **kwargs)

    def getSpec(*args, **kwargs):
        """getSpec(self) -> Spec"""
        return _engine_internal.Region_getSpec(*args, **kwargs)

    def getSpecFromType(*args, **kwargs):
        """getSpecFromType(nodeType) -> Spec"""
        return _engine_internal.Region_getSpecFromType(*args, **kwargs)

    getSpecFromType = staticmethod(getSpecFromType)
    def getParameterInt32(*args, **kwargs):
        """getParameterInt32(self, name) -> Int32"""
        return _engine_internal.Region_getParameterInt32(*args, **kwargs)

    def getParameterUInt32(*args, **kwargs):
        """getParameterUInt32(self, name) -> UInt32"""
        return _engine_internal.Region_getParameterUInt32(*args, **kwargs)

    def getParameterInt64(*args, **kwargs):
        """getParameterInt64(self, name) -> Int64"""
        return _engine_internal.Region_getParameterInt64(*args, **kwargs)

    def getParameterUInt64(*args, **kwargs):
        """getParameterUInt64(self, name) -> UInt64"""
        return _engine_internal.Region_getParameterUInt64(*args, **kwargs)

    def getParameterReal32(*args, **kwargs):
        """getParameterReal32(self, name) -> Real32"""
        return _engine_internal.Region_getParameterReal32(*args, **kwargs)

    def getParameterReal64(*args, **kwargs):
        """getParameterReal64(self, name) -> Real64"""
        return _engine_internal.Region_getParameterReal64(*args, **kwargs)

    def getParameterHandle(*args, **kwargs):
        """getParameterHandle(self, name) -> Handle"""
        return _engine_internal.Region_getParameterHandle(*args, **kwargs)

    def setParameterInt32(*args, **kwargs):
        """setParameterInt32(self, name, value)"""
        return _engine_internal.Region_setParameterInt32(*args, **kwargs)

    def setParameterUInt32(*args, **kwargs):
        """setParameterUInt32(self, name, value)"""
        return _engine_internal.Region_setParameterUInt32(*args, **kwargs)

    def setParameterInt64(*args, **kwargs):
        """setParameterInt64(self, name, value)"""
        return _engine_internal.Region_setParameterInt64(*args, **kwargs)

    def setParameterUInt64(*args, **kwargs):
        """setParameterUInt64(self, name, value)"""
        return _engine_internal.Region_setParameterUInt64(*args, **kwargs)

    def setParameterReal32(*args, **kwargs):
        """setParameterReal32(self, name, value)"""
        return _engine_internal.Region_setParameterReal32(*args, **kwargs)

    def setParameterReal64(*args, **kwargs):
        """setParameterReal64(self, name, value)"""
        return _engine_internal.Region_setParameterReal64(*args, **kwargs)

    def setParameterHandle(*args, **kwargs):
        """setParameterHandle(self, name, value)"""
        return _engine_internal.Region_setParameterHandle(*args, **kwargs)

    def getParameterArray(*args, **kwargs):
        """getParameterArray(self, name, array)"""
        return _engine_internal.Region_getParameterArray(*args, **kwargs)

    def setParameterArray(*args, **kwargs):
        """setParameterArray(self, name, array)"""
        return _engine_internal.Region_setParameterArray(*args, **kwargs)

    def setParameterString(*args, **kwargs):
        """setParameterString(self, name, s)"""
        return _engine_internal.Region_setParameterString(*args, **kwargs)

    def getParameterString(*args, **kwargs):
        """getParameterString(self, name) -> string"""
        return _engine_internal.Region_getParameterString(*args, **kwargs)

    def isParameterShared(*args, **kwargs):
        """isParameterShared(self, name) -> bool"""
        return _engine_internal.Region_isParameterShared(*args, **kwargs)

    def getOutputCount(*args, **kwargs):
        """getOutputCount(self, outputName) -> size_t"""
        return _engine_internal.Region_getOutputCount(*args, **kwargs)

    def getInputCount(*args, **kwargs):
        """getInputCount(self, inputName) -> size_t"""
        return _engine_internal.Region_getInputCount(*args, **kwargs)

    def enable(*args, **kwargs):
        """enable(self)"""
        return _engine_internal.Region_enable(*args, **kwargs)

    def disable(*args, **kwargs):
        """disable(self)"""
        return _engine_internal.Region_disable(*args, **kwargs)

    def executeCommand(*args, **kwargs):
        """executeCommand(self, args) -> string"""
        return _engine_internal.Region_executeCommand(*args, **kwargs)

    def compute(*args, **kwargs):
        """compute(self)"""
        return _engine_internal.Region_compute(*args, **kwargs)

    def enableProfiling(*args, **kwargs):
        """enableProfiling(self)"""
        return _engine_internal.Region_enableProfiling(*args, **kwargs)

    def disableProfiling(*args, **kwargs):
        """disableProfiling(self)"""
        return _engine_internal.Region_disableProfiling(*args, **kwargs)

    def resetProfiling(*args, **kwargs):
        """resetProfiling(self)"""
        return _engine_internal.Region_resetProfiling(*args, **kwargs)

    def getComputeTimer(*args, **kwargs):
        """getComputeTimer(self) -> Timer"""
        return _engine_internal.Region_getComputeTimer(*args, **kwargs)

    def getExecuteTimer(*args, **kwargs):
        """getExecuteTimer(self) -> Timer"""
        return _engine_internal.Region_getExecuteTimer(*args, **kwargs)

    def getSelf(*args, **kwargs):
        """getSelf(self) -> PyObject"""
        return _engine_internal.Region_getSelf(*args, **kwargs)

    def getInputArray(*args, **kwargs):
        """getInputArray(self, name) -> PyObject"""
        return _engine_internal.Region_getInputArray(*args, **kwargs)

    def getOutputArray(*args, **kwargs):
        """getOutputArray(self, name) -> PyObject"""
        return _engine_internal.Region_getOutputArray(*args, **kwargs)

    __swig_destroy__ = _engine_internal.delete_Region
Region_swigregister = _engine_internal.Region_swigregister
Region_swigregister(Region)

def Region_getSpecFromType(*args, **kwargs):
  """Region_getSpecFromType(nodeType) -> Spec"""
  return _engine_internal.Region_getSpecFromType(*args, **kwargs)

parameter = _engine_internal.parameter
output = _engine_internal.output
class watchData(object):
    """Proxy of C++ watchData class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    watchID = _swig_property(_engine_internal.watchData_watchID_get, _engine_internal.watchData_watchID_set)
    varName = _swig_property(_engine_internal.watchData_varName_get, _engine_internal.watchData_varName_set)
    wType = _swig_property(_engine_internal.watchData_wType_get, _engine_internal.watchData_wType_set)
    output = _swig_property(_engine_internal.watchData_output_get, _engine_internal.watchData_output_set)
    regionName = _swig_property(_engine_internal.watchData_regionName_get, _engine_internal.watchData_regionName_set)
    region = _swig_property(_engine_internal.watchData_region_get, _engine_internal.watchData_region_set)
    nodeIndex = _swig_property(_engine_internal.watchData_nodeIndex_get, _engine_internal.watchData_nodeIndex_set)
    varType = _swig_property(_engine_internal.watchData_varType_get, _engine_internal.watchData_varType_set)
    nodeName = _swig_property(_engine_internal.watchData_nodeName_get, _engine_internal.watchData_nodeName_set)
    array = _swig_property(_engine_internal.watchData_array_get, _engine_internal.watchData_array_set)
    isArray = _swig_property(_engine_internal.watchData_isArray_get, _engine_internal.watchData_isArray_set)
    sparseOutput = _swig_property(_engine_internal.watchData_sparseOutput_get, _engine_internal.watchData_sparseOutput_set)
    def __init__(self, *args, **kwargs): 
        """__init__(self) -> watchData"""
        this = _engine_internal.new_watchData(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _engine_internal.delete_watchData
watchData_swigregister = _engine_internal.watchData_swigregister
watchData_swigregister(watchData)

class allData(object):
    """Proxy of C++ allData class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    outStream = _swig_property(_engine_internal.allData_outStream_get, _engine_internal.allData_outStream_set)
    fileName = _swig_property(_engine_internal.allData_fileName_get, _engine_internal.allData_fileName_set)
    watches = _swig_property(_engine_internal.allData_watches_get, _engine_internal.allData_watches_set)
    def __init__(self, *args, **kwargs): 
        """__init__(self) -> allData"""
        this = _engine_internal.new_allData(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _engine_internal.delete_allData
allData_swigregister = _engine_internal.allData_swigregister
allData_swigregister(allData)

class Watcher(object):
    """Proxy of C++ Watcher class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        """__init__(self, fileName) -> Watcher"""
        this = _engine_internal.new_Watcher(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _engine_internal.delete_Watcher
    def watchParam(*args, **kwargs):
        """watchParam(self, regionName, varName, nodeIndex=-1, sparseOutput=True) -> unsigned int"""
        return _engine_internal.Watcher_watchParam(*args, **kwargs)

    def watchOutput(*args, **kwargs):
        """watchOutput(self, regionName, varName, sparseOutput=True) -> unsigned int"""
        return _engine_internal.Watcher_watchOutput(*args, **kwargs)

    def watcherCallback(*args, **kwargs):
        """watcherCallback(net, iteration, dataIn)"""
        return _engine_internal.Watcher_watcherCallback(*args, **kwargs)

    watcherCallback = staticmethod(watcherCallback)
    def attachToNetwork(*args, **kwargs):
        """attachToNetwork(self, ?)"""
        return _engine_internal.Watcher_attachToNetwork(*args, **kwargs)

    def detachFromNetwork(*args, **kwargs):
        """detachFromNetwork(self, ?)"""
        return _engine_internal.Watcher_detachFromNetwork(*args, **kwargs)

    def closeFile(*args, **kwargs):
        """closeFile(self)"""
        return _engine_internal.Watcher_closeFile(*args, **kwargs)

    def flushFile(*args, **kwargs):
        """flushFile(self)"""
        return _engine_internal.Watcher_flushFile(*args, **kwargs)

Watcher_swigregister = _engine_internal.Watcher_swigregister
Watcher_swigregister(Watcher)

def Watcher_watcherCallback(*args, **kwargs):
  """Watcher_watcherCallback(net, iteration, dataIn)"""
  return _engine_internal.Watcher_watcherCallback(*args, **kwargs)

class InputSpec(object):
    """Proxy of C++ InputSpec class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> InputSpec
        __init__(self, description, dataType, count, required, regionLevel, 
            isDefaultInput, requireSplitterMap=True) -> InputSpec
        """
        this = _engine_internal.new_InputSpec(*args)
        try: self.this.append(this)
        except: self.this = this
    description = _swig_property(_engine_internal.InputSpec_description_get, _engine_internal.InputSpec_description_set)
    dataType = _swig_property(_engine_internal.InputSpec_dataType_get, _engine_internal.InputSpec_dataType_set)
    count = _swig_property(_engine_internal.InputSpec_count_get, _engine_internal.InputSpec_count_set)
    required = _swig_property(_engine_internal.InputSpec_required_get, _engine_internal.InputSpec_required_set)
    regionLevel = _swig_property(_engine_internal.InputSpec_regionLevel_get, _engine_internal.InputSpec_regionLevel_set)
    isDefaultInput = _swig_property(_engine_internal.InputSpec_isDefaultInput_get, _engine_internal.InputSpec_isDefaultInput_set)
    requireSplitterMap = _swig_property(_engine_internal.InputSpec_requireSplitterMap_get, _engine_internal.InputSpec_requireSplitterMap_set)
    __swig_destroy__ = _engine_internal.delete_InputSpec
InputSpec_swigregister = _engine_internal.InputSpec_swigregister
InputSpec_swigregister(InputSpec)

class OutputSpec(object):
    """Proxy of C++ OutputSpec class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> OutputSpec
        __init__(self, description, dataType, count, regionLevel, isDefaultOutput) -> OutputSpec
        """
        this = _engine_internal.new_OutputSpec(*args)
        try: self.this.append(this)
        except: self.this = this
    description = _swig_property(_engine_internal.OutputSpec_description_get, _engine_internal.OutputSpec_description_set)
    dataType = _swig_property(_engine_internal.OutputSpec_dataType_get, _engine_internal.OutputSpec_dataType_set)
    count = _swig_property(_engine_internal.OutputSpec_count_get, _engine_internal.OutputSpec_count_set)
    regionLevel = _swig_property(_engine_internal.OutputSpec_regionLevel_get, _engine_internal.OutputSpec_regionLevel_set)
    isDefaultOutput = _swig_property(_engine_internal.OutputSpec_isDefaultOutput_get, _engine_internal.OutputSpec_isDefaultOutput_set)
    __swig_destroy__ = _engine_internal.delete_OutputSpec
OutputSpec_swigregister = _engine_internal.OutputSpec_swigregister
OutputSpec_swigregister(OutputSpec)

class CommandSpec(object):
    """Proxy of C++ CommandSpec class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> CommandSpec
        __init__(self, description) -> CommandSpec
        """
        this = _engine_internal.new_CommandSpec(*args)
        try: self.this.append(this)
        except: self.this = this
    description = _swig_property(_engine_internal.CommandSpec_description_get, _engine_internal.CommandSpec_description_set)
    __swig_destroy__ = _engine_internal.delete_CommandSpec
CommandSpec_swigregister = _engine_internal.CommandSpec_swigregister
CommandSpec_swigregister(CommandSpec)

class ParameterSpec(object):
    """Proxy of C++ ParameterSpec class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    CreateAccess = _engine_internal.ParameterSpec_CreateAccess
    ReadOnlyAccess = _engine_internal.ParameterSpec_ReadOnlyAccess
    ReadWriteAccess = _engine_internal.ParameterSpec_ReadWriteAccess
    def __init__(self, *args): 
        """
        __init__(self) -> ParameterSpec
        __init__(self, description, dataType, count, constraints, defaultValue, 
            accessMode) -> ParameterSpec
        """
        this = _engine_internal.new_ParameterSpec(*args)
        try: self.this.append(this)
        except: self.this = this
    description = _swig_property(_engine_internal.ParameterSpec_description_get, _engine_internal.ParameterSpec_description_set)
    dataType = _swig_property(_engine_internal.ParameterSpec_dataType_get, _engine_internal.ParameterSpec_dataType_set)
    count = _swig_property(_engine_internal.ParameterSpec_count_get, _engine_internal.ParameterSpec_count_set)
    constraints = _swig_property(_engine_internal.ParameterSpec_constraints_get, _engine_internal.ParameterSpec_constraints_set)
    defaultValue = _swig_property(_engine_internal.ParameterSpec_defaultValue_get, _engine_internal.ParameterSpec_defaultValue_set)
    accessMode = _swig_property(_engine_internal.ParameterSpec_accessMode_get, _engine_internal.ParameterSpec_accessMode_set)
    __swig_destroy__ = _engine_internal.delete_ParameterSpec
ParameterSpec_swigregister = _engine_internal.ParameterSpec_swigregister
ParameterSpec_swigregister(ParameterSpec)

class Spec(object):
    """Proxy of C++ Spec class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def toString(*args, **kwargs):
        """toString(self) -> string"""
        return _engine_internal.Spec_toString(*args, **kwargs)

    singleNodeOnly = _swig_property(_engine_internal.Spec_singleNodeOnly_get, _engine_internal.Spec_singleNodeOnly_set)
    description = _swig_property(_engine_internal.Spec_description_get, _engine_internal.Spec_description_set)
    inputs = _swig_property(_engine_internal.Spec_inputs_get, _engine_internal.Spec_inputs_set)
    outputs = _swig_property(_engine_internal.Spec_outputs_get, _engine_internal.Spec_outputs_set)
    commands = _swig_property(_engine_internal.Spec_commands_get, _engine_internal.Spec_commands_set)
    parameters = _swig_property(_engine_internal.Spec_parameters_get, _engine_internal.Spec_parameters_set)
    def __init__(self, *args, **kwargs): 
        """__init__(self) -> Spec"""
        this = _engine_internal.new_Spec(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _engine_internal.delete_Spec
Spec_swigregister = _engine_internal.Spec_swigregister
Spec_swigregister(Spec)

class InputPair(object):
    """Proxy of C++ InputPair class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> InputPair
        __init__(self, first, second) -> InputPair
        __init__(self, p) -> InputPair
        """
        this = _engine_internal.new_InputPair(*args)
        try: self.this.append(this)
        except: self.this = this
    first = _swig_property(_engine_internal.InputPair_first_get, _engine_internal.InputPair_first_set)
    second = _swig_property(_engine_internal.InputPair_second_get, _engine_internal.InputPair_second_set)
    def __len__(self): return 2
    def __repr__(self): return str((self.first, self.second))
    def __getitem__(self, index): 
      if not (index % 2): 
        return self.first
      else:
        return self.second
    def __setitem__(self, index, val):
      if not (index % 2): 
        self.first = val
      else:
        self.second = val
    __swig_destroy__ = _engine_internal.delete_InputPair
InputPair_swigregister = _engine_internal.InputPair_swigregister
InputPair_swigregister(InputPair)

class OutputPair(object):
    """Proxy of C++ OutputPair class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> OutputPair
        __init__(self, first, second) -> OutputPair
        __init__(self, p) -> OutputPair
        """
        this = _engine_internal.new_OutputPair(*args)
        try: self.this.append(this)
        except: self.this = this
    first = _swig_property(_engine_internal.OutputPair_first_get, _engine_internal.OutputPair_first_set)
    second = _swig_property(_engine_internal.OutputPair_second_get, _engine_internal.OutputPair_second_set)
    def __len__(self): return 2
    def __repr__(self): return str((self.first, self.second))
    def __getitem__(self, index): 
      if not (index % 2): 
        return self.first
      else:
        return self.second
    def __setitem__(self, index, val):
      if not (index % 2): 
        self.first = val
      else:
        self.second = val
    __swig_destroy__ = _engine_internal.delete_OutputPair
OutputPair_swigregister = _engine_internal.OutputPair_swigregister
OutputPair_swigregister(OutputPair)

class ParameterPair(object):
    """Proxy of C++ ParameterPair class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> ParameterPair
        __init__(self, first, second) -> ParameterPair
        __init__(self, p) -> ParameterPair
        """
        this = _engine_internal.new_ParameterPair(*args)
        try: self.this.append(this)
        except: self.this = this
    first = _swig_property(_engine_internal.ParameterPair_first_get, _engine_internal.ParameterPair_first_set)
    second = _swig_property(_engine_internal.ParameterPair_second_get, _engine_internal.ParameterPair_second_set)
    def __len__(self): return 2
    def __repr__(self): return str((self.first, self.second))
    def __getitem__(self, index): 
      if not (index % 2): 
        return self.first
      else:
        return self.second
    def __setitem__(self, index, val):
      if not (index % 2): 
        self.first = val
      else:
        self.second = val
    __swig_destroy__ = _engine_internal.delete_ParameterPair
ParameterPair_swigregister = _engine_internal.ParameterPair_swigregister
ParameterPair_swigregister(ParameterPair)

class CommandPair(object):
    """Proxy of C++ CommandPair class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> CommandPair
        __init__(self, first, second) -> CommandPair
        __init__(self, p) -> CommandPair
        """
        this = _engine_internal.new_CommandPair(*args)
        try: self.this.append(this)
        except: self.this = this
    first = _swig_property(_engine_internal.CommandPair_first_get, _engine_internal.CommandPair_first_set)
    second = _swig_property(_engine_internal.CommandPair_second_get, _engine_internal.CommandPair_second_set)
    def __len__(self): return 2
    def __repr__(self): return str((self.first, self.second))
    def __getitem__(self, index): 
      if not (index % 2): 
        return self.first
      else:
        return self.second
    def __setitem__(self, index, val):
      if not (index % 2): 
        self.first = val
      else:
        self.second = val
    __swig_destroy__ = _engine_internal.delete_CommandPair
CommandPair_swigregister = _engine_internal.CommandPair_swigregister
CommandPair_swigregister(CommandPair)

class RegionPair(object):
    """Proxy of C++ RegionPair class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> RegionPair
        __init__(self, __a, __b) -> RegionPair
        __init__(self, __p) -> RegionPair
        """
        this = _engine_internal.new_RegionPair(*args)
        try: self.this.append(this)
        except: self.this = this
    first = _swig_property(_engine_internal.RegionPair_first_get, _engine_internal.RegionPair_first_set)
    second = _swig_property(_engine_internal.RegionPair_second_get, _engine_internal.RegionPair_second_set)
    def __len__(self): return 2
    def __repr__(self): return str((self.first, self.second))
    def __getitem__(self, index): 
      if not (index % 2): 
        return self.first
      else:
        return self.second
    def __setitem__(self, index, val):
      if not (index % 2): 
        self.first = val
      else:
        self.second = val
    __swig_destroy__ = _engine_internal.delete_RegionPair
RegionPair_swigregister = _engine_internal.RegionPair_swigregister
RegionPair_swigregister(RegionPair)

class Timer(object):
    """Proxy of C++ Timer class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args, **kwargs): 
        """__init__(self, startme=False) -> Timer"""
        this = _engine_internal.new_Timer(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    def start(*args, **kwargs):
        """start(self)"""
        return _engine_internal.Timer_start(*args, **kwargs)

    def stop(*args, **kwargs):
        """stop(self)"""
        return _engine_internal.Timer_stop(*args, **kwargs)

    def getElapsed(*args, **kwargs):
        """getElapsed(self) -> Real64"""
        return _engine_internal.Timer_getElapsed(*args, **kwargs)

    def reset(*args, **kwargs):
        """reset(self)"""
        return _engine_internal.Timer_reset(*args, **kwargs)

    def getStartCount(*args, **kwargs):
        """getStartCount(self) -> UInt64"""
        return _engine_internal.Timer_getStartCount(*args, **kwargs)

    def isStarted(*args, **kwargs):
        """isStarted(self) -> bool"""
        return _engine_internal.Timer_isStarted(*args, **kwargs)

    def toString(*args, **kwargs):
        """toString(self) -> string"""
        return _engine_internal.Timer_toString(*args, **kwargs)

    def __str__(self):
      return self.toString()

    elapsed = property(getElapsed)
    startCount = property(getStartCount)

    __swig_destroy__ = _engine_internal.delete_Timer
Timer_swigregister = _engine_internal.Timer_swigregister
Timer_swigregister(Timer)


def array2numpy(*args, **kwargs):
  """array2numpy(a) -> PyObject"""
  return _engine_internal.array2numpy(*args, **kwargs)
class ByteArray(Array):
    """Proxy of C++ ByteArray class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args): 
        """
        __init__(self) -> ByteArray
        __init__(self, count) -> ByteArray
        """
        this = _engine_internal.new_ByteArray(*args)
        try: self.this.append(this)
        except: self.this = this
    def getType(*args, **kwargs):
        """getType(self) -> NTA_BasicType"""
        return _engine_internal.ByteArray_getType(*args, **kwargs)

    def __getitem__(*args, **kwargs):
        """__getitem__(self, i) -> char"""
        return _engine_internal.ByteArray___getitem__(*args, **kwargs)

    def __setitem__(*args, **kwargs):
        """__setitem__(self, i, x)"""
        return _engine_internal.ByteArray___setitem__(*args, **kwargs)

    def __len__(*args, **kwargs):
        """__len__(self) -> size_t"""
        return _engine_internal.ByteArray___len__(*args, **kwargs)

    def __repr__(*args, **kwargs):
        """__repr__(self) -> string"""
        return _engine_internal.ByteArray___repr__(*args, **kwargs)

    def __str__(*args, **kwargs):
        """__str__(self) -> string"""
        return _engine_internal.ByteArray___str__(*args, **kwargs)

    def asNumpyArray(*args, **kwargs):
        """asNumpyArray(self) -> PyObject"""
        return _engine_internal.ByteArray_asNumpyArray(*args, **kwargs)

    __swig_destroy__ = _engine_internal.delete_ByteArray
ByteArray_swigregister = _engine_internal.ByteArray_swigregister
ByteArray_swigregister(ByteArray)

def getBasicType(*args):
  """
    getBasicType(?) -> NTA_BasicType
    getBasicType(?) -> NTA_BasicType
    getBasicType(?) -> NTA_BasicType
    getBasicType(?) -> NTA_BasicType
    getBasicType(?) -> NTA_BasicType
    getBasicType(?) -> NTA_BasicType
    getBasicType(?) -> NTA_BasicType
    getBasicType(?) -> NTA_BasicType
    getBasicType(?) -> NTA_BasicType
    """
  return _engine_internal.getBasicType(*args)

class Int16Array(Array):
    """Proxy of C++ Int16Array class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args): 
        """
        __init__(self) -> Int16Array
        __init__(self, count) -> Int16Array
        """
        this = _engine_internal.new_Int16Array(*args)
        try: self.this.append(this)
        except: self.this = this
    def getType(*args, **kwargs):
        """getType(self) -> NTA_BasicType"""
        return _engine_internal.Int16Array_getType(*args, **kwargs)

    def __getitem__(*args, **kwargs):
        """__getitem__(self, i) -> short"""
        return _engine_internal.Int16Array___getitem__(*args, **kwargs)

    def __setitem__(*args, **kwargs):
        """__setitem__(self, i, x)"""
        return _engine_internal.Int16Array___setitem__(*args, **kwargs)

    def __len__(*args, **kwargs):
        """__len__(self) -> size_t"""
        return _engine_internal.Int16Array___len__(*args, **kwargs)

    def __repr__(*args, **kwargs):
        """__repr__(self) -> string"""
        return _engine_internal.Int16Array___repr__(*args, **kwargs)

    def __str__(*args, **kwargs):
        """__str__(self) -> string"""
        return _engine_internal.Int16Array___str__(*args, **kwargs)

    def asNumpyArray(*args, **kwargs):
        """asNumpyArray(self) -> PyObject"""
        return _engine_internal.Int16Array_asNumpyArray(*args, **kwargs)

    __swig_destroy__ = _engine_internal.delete_Int16Array
Int16Array_swigregister = _engine_internal.Int16Array_swigregister
Int16Array_swigregister(Int16Array)

class UInt16Array(Array):
    """Proxy of C++ UInt16Array class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args): 
        """
        __init__(self) -> UInt16Array
        __init__(self, count) -> UInt16Array
        """
        this = _engine_internal.new_UInt16Array(*args)
        try: self.this.append(this)
        except: self.this = this
    def getType(*args, **kwargs):
        """getType(self) -> NTA_BasicType"""
        return _engine_internal.UInt16Array_getType(*args, **kwargs)

    def __getitem__(*args, **kwargs):
        """__getitem__(self, i) -> unsigned short"""
        return _engine_internal.UInt16Array___getitem__(*args, **kwargs)

    def __setitem__(*args, **kwargs):
        """__setitem__(self, i, x)"""
        return _engine_internal.UInt16Array___setitem__(*args, **kwargs)

    def __len__(*args, **kwargs):
        """__len__(self) -> size_t"""
        return _engine_internal.UInt16Array___len__(*args, **kwargs)

    def __repr__(*args, **kwargs):
        """__repr__(self) -> string"""
        return _engine_internal.UInt16Array___repr__(*args, **kwargs)

    def __str__(*args, **kwargs):
        """__str__(self) -> string"""
        return _engine_internal.UInt16Array___str__(*args, **kwargs)

    def asNumpyArray(*args, **kwargs):
        """asNumpyArray(self) -> PyObject"""
        return _engine_internal.UInt16Array_asNumpyArray(*args, **kwargs)

    __swig_destroy__ = _engine_internal.delete_UInt16Array
UInt16Array_swigregister = _engine_internal.UInt16Array_swigregister
UInt16Array_swigregister(UInt16Array)

class Int32Array(Array):
    """Proxy of C++ Int32Array class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args): 
        """
        __init__(self) -> Int32Array
        __init__(self, count) -> Int32Array
        """
        this = _engine_internal.new_Int32Array(*args)
        try: self.this.append(this)
        except: self.this = this
    def getType(*args, **kwargs):
        """getType(self) -> NTA_BasicType"""
        return _engine_internal.Int32Array_getType(*args, **kwargs)

    def __getitem__(*args, **kwargs):
        """__getitem__(self, i) -> int"""
        return _engine_internal.Int32Array___getitem__(*args, **kwargs)

    def __setitem__(*args, **kwargs):
        """__setitem__(self, i, x)"""
        return _engine_internal.Int32Array___setitem__(*args, **kwargs)

    def __len__(*args, **kwargs):
        """__len__(self) -> size_t"""
        return _engine_internal.Int32Array___len__(*args, **kwargs)

    def __repr__(*args, **kwargs):
        """__repr__(self) -> string"""
        return _engine_internal.Int32Array___repr__(*args, **kwargs)

    def __str__(*args, **kwargs):
        """__str__(self) -> string"""
        return _engine_internal.Int32Array___str__(*args, **kwargs)

    def asNumpyArray(*args, **kwargs):
        """asNumpyArray(self) -> PyObject"""
        return _engine_internal.Int32Array_asNumpyArray(*args, **kwargs)

    __swig_destroy__ = _engine_internal.delete_Int32Array
Int32Array_swigregister = _engine_internal.Int32Array_swigregister
Int32Array_swigregister(Int32Array)

class UInt32Array(Array):
    """Proxy of C++ UInt32Array class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args): 
        """
        __init__(self) -> UInt32Array
        __init__(self, count) -> UInt32Array
        """
        this = _engine_internal.new_UInt32Array(*args)
        try: self.this.append(this)
        except: self.this = this
    def getType(*args, **kwargs):
        """getType(self) -> NTA_BasicType"""
        return _engine_internal.UInt32Array_getType(*args, **kwargs)

    def __getitem__(*args, **kwargs):
        """__getitem__(self, i) -> unsigned int"""
        return _engine_internal.UInt32Array___getitem__(*args, **kwargs)

    def __setitem__(*args, **kwargs):
        """__setitem__(self, i, x)"""
        return _engine_internal.UInt32Array___setitem__(*args, **kwargs)

    def __len__(*args, **kwargs):
        """__len__(self) -> size_t"""
        return _engine_internal.UInt32Array___len__(*args, **kwargs)

    def __repr__(*args, **kwargs):
        """__repr__(self) -> string"""
        return _engine_internal.UInt32Array___repr__(*args, **kwargs)

    def __str__(*args, **kwargs):
        """__str__(self) -> string"""
        return _engine_internal.UInt32Array___str__(*args, **kwargs)

    def asNumpyArray(*args, **kwargs):
        """asNumpyArray(self) -> PyObject"""
        return _engine_internal.UInt32Array_asNumpyArray(*args, **kwargs)

    __swig_destroy__ = _engine_internal.delete_UInt32Array
UInt32Array_swigregister = _engine_internal.UInt32Array_swigregister
UInt32Array_swigregister(UInt32Array)

class Int64Array(Array):
    """Proxy of C++ Int64Array class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args): 
        """
        __init__(self) -> Int64Array
        __init__(self, count) -> Int64Array
        """
        this = _engine_internal.new_Int64Array(*args)
        try: self.this.append(this)
        except: self.this = this
    def getType(*args, **kwargs):
        """getType(self) -> NTA_BasicType"""
        return _engine_internal.Int64Array_getType(*args, **kwargs)

    def __getitem__(*args, **kwargs):
        """__getitem__(self, i) -> long"""
        return _engine_internal.Int64Array___getitem__(*args, **kwargs)

    def __setitem__(*args, **kwargs):
        """__setitem__(self, i, x)"""
        return _engine_internal.Int64Array___setitem__(*args, **kwargs)

    def __len__(*args, **kwargs):
        """__len__(self) -> size_t"""
        return _engine_internal.Int64Array___len__(*args, **kwargs)

    def __repr__(*args, **kwargs):
        """__repr__(self) -> string"""
        return _engine_internal.Int64Array___repr__(*args, **kwargs)

    def __str__(*args, **kwargs):
        """__str__(self) -> string"""
        return _engine_internal.Int64Array___str__(*args, **kwargs)

    def asNumpyArray(*args, **kwargs):
        """asNumpyArray(self) -> PyObject"""
        return _engine_internal.Int64Array_asNumpyArray(*args, **kwargs)

    __swig_destroy__ = _engine_internal.delete_Int64Array
Int64Array_swigregister = _engine_internal.Int64Array_swigregister
Int64Array_swigregister(Int64Array)

class UInt64Array(Array):
    """Proxy of C++ UInt64Array class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args): 
        """
        __init__(self) -> UInt64Array
        __init__(self, count) -> UInt64Array
        """
        this = _engine_internal.new_UInt64Array(*args)
        try: self.this.append(this)
        except: self.this = this
    def getType(*args, **kwargs):
        """getType(self) -> NTA_BasicType"""
        return _engine_internal.UInt64Array_getType(*args, **kwargs)

    def __getitem__(*args, **kwargs):
        """__getitem__(self, i) -> unsigned long"""
        return _engine_internal.UInt64Array___getitem__(*args, **kwargs)

    def __setitem__(*args, **kwargs):
        """__setitem__(self, i, x)"""
        return _engine_internal.UInt64Array___setitem__(*args, **kwargs)

    def __len__(*args, **kwargs):
        """__len__(self) -> size_t"""
        return _engine_internal.UInt64Array___len__(*args, **kwargs)

    def __repr__(*args, **kwargs):
        """__repr__(self) -> string"""
        return _engine_internal.UInt64Array___repr__(*args, **kwargs)

    def __str__(*args, **kwargs):
        """__str__(self) -> string"""
        return _engine_internal.UInt64Array___str__(*args, **kwargs)

    def asNumpyArray(*args, **kwargs):
        """asNumpyArray(self) -> PyObject"""
        return _engine_internal.UInt64Array_asNumpyArray(*args, **kwargs)

    __swig_destroy__ = _engine_internal.delete_UInt64Array
UInt64Array_swigregister = _engine_internal.UInt64Array_swigregister
UInt64Array_swigregister(UInt64Array)

class Real32Array(Array):
    """Proxy of C++ Real32Array class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args): 
        """
        __init__(self) -> Real32Array
        __init__(self, count) -> Real32Array
        """
        this = _engine_internal.new_Real32Array(*args)
        try: self.this.append(this)
        except: self.this = this
    def getType(*args, **kwargs):
        """getType(self) -> NTA_BasicType"""
        return _engine_internal.Real32Array_getType(*args, **kwargs)

    def __getitem__(*args, **kwargs):
        """__getitem__(self, i) -> float"""
        return _engine_internal.Real32Array___getitem__(*args, **kwargs)

    def __setitem__(*args, **kwargs):
        """__setitem__(self, i, x)"""
        return _engine_internal.Real32Array___setitem__(*args, **kwargs)

    def __len__(*args, **kwargs):
        """__len__(self) -> size_t"""
        return _engine_internal.Real32Array___len__(*args, **kwargs)

    def __repr__(*args, **kwargs):
        """__repr__(self) -> string"""
        return _engine_internal.Real32Array___repr__(*args, **kwargs)

    def __str__(*args, **kwargs):
        """__str__(self) -> string"""
        return _engine_internal.Real32Array___str__(*args, **kwargs)

    def asNumpyArray(*args, **kwargs):
        """asNumpyArray(self) -> PyObject"""
        return _engine_internal.Real32Array_asNumpyArray(*args, **kwargs)

    __swig_destroy__ = _engine_internal.delete_Real32Array
Real32Array_swigregister = _engine_internal.Real32Array_swigregister
Real32Array_swigregister(Real32Array)

class Real64Array(Array):
    """Proxy of C++ Real64Array class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args): 
        """
        __init__(self) -> Real64Array
        __init__(self, count) -> Real64Array
        """
        this = _engine_internal.new_Real64Array(*args)
        try: self.this.append(this)
        except: self.this = this
    def getType(*args, **kwargs):
        """getType(self) -> NTA_BasicType"""
        return _engine_internal.Real64Array_getType(*args, **kwargs)

    def __getitem__(*args, **kwargs):
        """__getitem__(self, i) -> double"""
        return _engine_internal.Real64Array___getitem__(*args, **kwargs)

    def __setitem__(*args, **kwargs):
        """__setitem__(self, i, x)"""
        return _engine_internal.Real64Array___setitem__(*args, **kwargs)

    def __len__(*args, **kwargs):
        """__len__(self) -> size_t"""
        return _engine_internal.Real64Array___len__(*args, **kwargs)

    def __repr__(*args, **kwargs):
        """__repr__(self) -> string"""
        return _engine_internal.Real64Array___repr__(*args, **kwargs)

    def __str__(*args, **kwargs):
        """__str__(self) -> string"""
        return _engine_internal.Real64Array___str__(*args, **kwargs)

    def asNumpyArray(*args, **kwargs):
        """asNumpyArray(self) -> PyObject"""
        return _engine_internal.Real64Array_asNumpyArray(*args, **kwargs)

    __swig_destroy__ = _engine_internal.delete_Real64Array
Real64Array_swigregister = _engine_internal.Real64Array_swigregister
Real64Array_swigregister(Real64Array)

class ByteArrayRef(ArrayRef):
    """Proxy of C++ ByteArrayRef class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args): 
        """
        __init__(self) -> ByteArrayRef
        __init__(self, a) -> ByteArrayRef
        """
        this = _engine_internal.new_ByteArrayRef(*args)
        try: self.this.append(this)
        except: self.this = this
    def getType(*args, **kwargs):
        """getType(self) -> NTA_BasicType"""
        return _engine_internal.ByteArrayRef_getType(*args, **kwargs)

    def __getitem__(*args, **kwargs):
        """__getitem__(self, i) -> char"""
        return _engine_internal.ByteArrayRef___getitem__(*args, **kwargs)

    def __setitem__(*args, **kwargs):
        """__setitem__(self, i, x)"""
        return _engine_internal.ByteArrayRef___setitem__(*args, **kwargs)

    def __len__(*args, **kwargs):
        """__len__(self) -> size_t"""
        return _engine_internal.ByteArrayRef___len__(*args, **kwargs)

    def __repr__(*args, **kwargs):
        """__repr__(self) -> string"""
        return _engine_internal.ByteArrayRef___repr__(*args, **kwargs)

    def __str__(*args, **kwargs):
        """__str__(self) -> string"""
        return _engine_internal.ByteArrayRef___str__(*args, **kwargs)

    def asNumpyArray(*args, **kwargs):
        """asNumpyArray(self) -> PyObject"""
        return _engine_internal.ByteArrayRef_asNumpyArray(*args, **kwargs)

    __swig_destroy__ = _engine_internal.delete_ByteArrayRef
ByteArrayRef_swigregister = _engine_internal.ByteArrayRef_swigregister
ByteArrayRef_swigregister(ByteArrayRef)

class Int16ArrayRef(ArrayRef):
    """Proxy of C++ Int16ArrayRef class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args): 
        """
        __init__(self) -> Int16ArrayRef
        __init__(self, a) -> Int16ArrayRef
        """
        this = _engine_internal.new_Int16ArrayRef(*args)
        try: self.this.append(this)
        except: self.this = this
    def getType(*args, **kwargs):
        """getType(self) -> NTA_BasicType"""
        return _engine_internal.Int16ArrayRef_getType(*args, **kwargs)

    def __getitem__(*args, **kwargs):
        """__getitem__(self, i) -> short"""
        return _engine_internal.Int16ArrayRef___getitem__(*args, **kwargs)

    def __setitem__(*args, **kwargs):
        """__setitem__(self, i, x)"""
        return _engine_internal.Int16ArrayRef___setitem__(*args, **kwargs)

    def __len__(*args, **kwargs):
        """__len__(self) -> size_t"""
        return _engine_internal.Int16ArrayRef___len__(*args, **kwargs)

    def __repr__(*args, **kwargs):
        """__repr__(self) -> string"""
        return _engine_internal.Int16ArrayRef___repr__(*args, **kwargs)

    def __str__(*args, **kwargs):
        """__str__(self) -> string"""
        return _engine_internal.Int16ArrayRef___str__(*args, **kwargs)

    def asNumpyArray(*args, **kwargs):
        """asNumpyArray(self) -> PyObject"""
        return _engine_internal.Int16ArrayRef_asNumpyArray(*args, **kwargs)

    __swig_destroy__ = _engine_internal.delete_Int16ArrayRef
Int16ArrayRef_swigregister = _engine_internal.Int16ArrayRef_swigregister
Int16ArrayRef_swigregister(Int16ArrayRef)

class UInt16ArrayRef(ArrayRef):
    """Proxy of C++ UInt16ArrayRef class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args): 
        """
        __init__(self) -> UInt16ArrayRef
        __init__(self, a) -> UInt16ArrayRef
        """
        this = _engine_internal.new_UInt16ArrayRef(*args)
        try: self.this.append(this)
        except: self.this = this
    def getType(*args, **kwargs):
        """getType(self) -> NTA_BasicType"""
        return _engine_internal.UInt16ArrayRef_getType(*args, **kwargs)

    def __getitem__(*args, **kwargs):
        """__getitem__(self, i) -> unsigned short"""
        return _engine_internal.UInt16ArrayRef___getitem__(*args, **kwargs)

    def __setitem__(*args, **kwargs):
        """__setitem__(self, i, x)"""
        return _engine_internal.UInt16ArrayRef___setitem__(*args, **kwargs)

    def __len__(*args, **kwargs):
        """__len__(self) -> size_t"""
        return _engine_internal.UInt16ArrayRef___len__(*args, **kwargs)

    def __repr__(*args, **kwargs):
        """__repr__(self) -> string"""
        return _engine_internal.UInt16ArrayRef___repr__(*args, **kwargs)

    def __str__(*args, **kwargs):
        """__str__(self) -> string"""
        return _engine_internal.UInt16ArrayRef___str__(*args, **kwargs)

    def asNumpyArray(*args, **kwargs):
        """asNumpyArray(self) -> PyObject"""
        return _engine_internal.UInt16ArrayRef_asNumpyArray(*args, **kwargs)

    __swig_destroy__ = _engine_internal.delete_UInt16ArrayRef
UInt16ArrayRef_swigregister = _engine_internal.UInt16ArrayRef_swigregister
UInt16ArrayRef_swigregister(UInt16ArrayRef)

class Int32ArrayRef(ArrayRef):
    """Proxy of C++ Int32ArrayRef class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args): 
        """
        __init__(self) -> Int32ArrayRef
        __init__(self, a) -> Int32ArrayRef
        """
        this = _engine_internal.new_Int32ArrayRef(*args)
        try: self.this.append(this)
        except: self.this = this
    def getType(*args, **kwargs):
        """getType(self) -> NTA_BasicType"""
        return _engine_internal.Int32ArrayRef_getType(*args, **kwargs)

    def __getitem__(*args, **kwargs):
        """__getitem__(self, i) -> int"""
        return _engine_internal.Int32ArrayRef___getitem__(*args, **kwargs)

    def __setitem__(*args, **kwargs):
        """__setitem__(self, i, x)"""
        return _engine_internal.Int32ArrayRef___setitem__(*args, **kwargs)

    def __len__(*args, **kwargs):
        """__len__(self) -> size_t"""
        return _engine_internal.Int32ArrayRef___len__(*args, **kwargs)

    def __repr__(*args, **kwargs):
        """__repr__(self) -> string"""
        return _engine_internal.Int32ArrayRef___repr__(*args, **kwargs)

    def __str__(*args, **kwargs):
        """__str__(self) -> string"""
        return _engine_internal.Int32ArrayRef___str__(*args, **kwargs)

    def asNumpyArray(*args, **kwargs):
        """asNumpyArray(self) -> PyObject"""
        return _engine_internal.Int32ArrayRef_asNumpyArray(*args, **kwargs)

    __swig_destroy__ = _engine_internal.delete_Int32ArrayRef
Int32ArrayRef_swigregister = _engine_internal.Int32ArrayRef_swigregister
Int32ArrayRef_swigregister(Int32ArrayRef)

class UInt32ArrayRef(ArrayRef):
    """Proxy of C++ UInt32ArrayRef class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args): 
        """
        __init__(self) -> UInt32ArrayRef
        __init__(self, a) -> UInt32ArrayRef
        """
        this = _engine_internal.new_UInt32ArrayRef(*args)
        try: self.this.append(this)
        except: self.this = this
    def getType(*args, **kwargs):
        """getType(self) -> NTA_BasicType"""
        return _engine_internal.UInt32ArrayRef_getType(*args, **kwargs)

    def __getitem__(*args, **kwargs):
        """__getitem__(self, i) -> unsigned int"""
        return _engine_internal.UInt32ArrayRef___getitem__(*args, **kwargs)

    def __setitem__(*args, **kwargs):
        """__setitem__(self, i, x)"""
        return _engine_internal.UInt32ArrayRef___setitem__(*args, **kwargs)

    def __len__(*args, **kwargs):
        """__len__(self) -> size_t"""
        return _engine_internal.UInt32ArrayRef___len__(*args, **kwargs)

    def __repr__(*args, **kwargs):
        """__repr__(self) -> string"""
        return _engine_internal.UInt32ArrayRef___repr__(*args, **kwargs)

    def __str__(*args, **kwargs):
        """__str__(self) -> string"""
        return _engine_internal.UInt32ArrayRef___str__(*args, **kwargs)

    def asNumpyArray(*args, **kwargs):
        """asNumpyArray(self) -> PyObject"""
        return _engine_internal.UInt32ArrayRef_asNumpyArray(*args, **kwargs)

    __swig_destroy__ = _engine_internal.delete_UInt32ArrayRef
UInt32ArrayRef_swigregister = _engine_internal.UInt32ArrayRef_swigregister
UInt32ArrayRef_swigregister(UInt32ArrayRef)

class Int64ArrayRef(ArrayRef):
    """Proxy of C++ Int64ArrayRef class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args): 
        """
        __init__(self) -> Int64ArrayRef
        __init__(self, a) -> Int64ArrayRef
        """
        this = _engine_internal.new_Int64ArrayRef(*args)
        try: self.this.append(this)
        except: self.this = this
    def getType(*args, **kwargs):
        """getType(self) -> NTA_BasicType"""
        return _engine_internal.Int64ArrayRef_getType(*args, **kwargs)

    def __getitem__(*args, **kwargs):
        """__getitem__(self, i) -> long"""
        return _engine_internal.Int64ArrayRef___getitem__(*args, **kwargs)

    def __setitem__(*args, **kwargs):
        """__setitem__(self, i, x)"""
        return _engine_internal.Int64ArrayRef___setitem__(*args, **kwargs)

    def __len__(*args, **kwargs):
        """__len__(self) -> size_t"""
        return _engine_internal.Int64ArrayRef___len__(*args, **kwargs)

    def __repr__(*args, **kwargs):
        """__repr__(self) -> string"""
        return _engine_internal.Int64ArrayRef___repr__(*args, **kwargs)

    def __str__(*args, **kwargs):
        """__str__(self) -> string"""
        return _engine_internal.Int64ArrayRef___str__(*args, **kwargs)

    def asNumpyArray(*args, **kwargs):
        """asNumpyArray(self) -> PyObject"""
        return _engine_internal.Int64ArrayRef_asNumpyArray(*args, **kwargs)

    __swig_destroy__ = _engine_internal.delete_Int64ArrayRef
Int64ArrayRef_swigregister = _engine_internal.Int64ArrayRef_swigregister
Int64ArrayRef_swigregister(Int64ArrayRef)

class UInt64ArrayRef(ArrayRef):
    """Proxy of C++ UInt64ArrayRef class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args): 
        """
        __init__(self) -> UInt64ArrayRef
        __init__(self, a) -> UInt64ArrayRef
        """
        this = _engine_internal.new_UInt64ArrayRef(*args)
        try: self.this.append(this)
        except: self.this = this
    def getType(*args, **kwargs):
        """getType(self) -> NTA_BasicType"""
        return _engine_internal.UInt64ArrayRef_getType(*args, **kwargs)

    def __getitem__(*args, **kwargs):
        """__getitem__(self, i) -> unsigned long"""
        return _engine_internal.UInt64ArrayRef___getitem__(*args, **kwargs)

    def __setitem__(*args, **kwargs):
        """__setitem__(self, i, x)"""
        return _engine_internal.UInt64ArrayRef___setitem__(*args, **kwargs)

    def __len__(*args, **kwargs):
        """__len__(self) -> size_t"""
        return _engine_internal.UInt64ArrayRef___len__(*args, **kwargs)

    def __repr__(*args, **kwargs):
        """__repr__(self) -> string"""
        return _engine_internal.UInt64ArrayRef___repr__(*args, **kwargs)

    def __str__(*args, **kwargs):
        """__str__(self) -> string"""
        return _engine_internal.UInt64ArrayRef___str__(*args, **kwargs)

    def asNumpyArray(*args, **kwargs):
        """asNumpyArray(self) -> PyObject"""
        return _engine_internal.UInt64ArrayRef_asNumpyArray(*args, **kwargs)

    __swig_destroy__ = _engine_internal.delete_UInt64ArrayRef
UInt64ArrayRef_swigregister = _engine_internal.UInt64ArrayRef_swigregister
UInt64ArrayRef_swigregister(UInt64ArrayRef)

class Real32ArrayRef(ArrayRef):
    """Proxy of C++ Real32ArrayRef class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args): 
        """
        __init__(self) -> Real32ArrayRef
        __init__(self, a) -> Real32ArrayRef
        """
        this = _engine_internal.new_Real32ArrayRef(*args)
        try: self.this.append(this)
        except: self.this = this
    def getType(*args, **kwargs):
        """getType(self) -> NTA_BasicType"""
        return _engine_internal.Real32ArrayRef_getType(*args, **kwargs)

    def __getitem__(*args, **kwargs):
        """__getitem__(self, i) -> float"""
        return _engine_internal.Real32ArrayRef___getitem__(*args, **kwargs)

    def __setitem__(*args, **kwargs):
        """__setitem__(self, i, x)"""
        return _engine_internal.Real32ArrayRef___setitem__(*args, **kwargs)

    def __len__(*args, **kwargs):
        """__len__(self) -> size_t"""
        return _engine_internal.Real32ArrayRef___len__(*args, **kwargs)

    def __repr__(*args, **kwargs):
        """__repr__(self) -> string"""
        return _engine_internal.Real32ArrayRef___repr__(*args, **kwargs)

    def __str__(*args, **kwargs):
        """__str__(self) -> string"""
        return _engine_internal.Real32ArrayRef___str__(*args, **kwargs)

    def asNumpyArray(*args, **kwargs):
        """asNumpyArray(self) -> PyObject"""
        return _engine_internal.Real32ArrayRef_asNumpyArray(*args, **kwargs)

    __swig_destroy__ = _engine_internal.delete_Real32ArrayRef
Real32ArrayRef_swigregister = _engine_internal.Real32ArrayRef_swigregister
Real32ArrayRef_swigregister(Real32ArrayRef)

class Real64ArrayRef(ArrayRef):
    """Proxy of C++ Real64ArrayRef class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args): 
        """
        __init__(self) -> Real64ArrayRef
        __init__(self, a) -> Real64ArrayRef
        """
        this = _engine_internal.new_Real64ArrayRef(*args)
        try: self.this.append(this)
        except: self.this = this
    def getType(*args, **kwargs):
        """getType(self) -> NTA_BasicType"""
        return _engine_internal.Real64ArrayRef_getType(*args, **kwargs)

    def __getitem__(*args, **kwargs):
        """__getitem__(self, i) -> double"""
        return _engine_internal.Real64ArrayRef___getitem__(*args, **kwargs)

    def __setitem__(*args, **kwargs):
        """__setitem__(self, i, x)"""
        return _engine_internal.Real64ArrayRef___setitem__(*args, **kwargs)

    def __len__(*args, **kwargs):
        """__len__(self) -> size_t"""
        return _engine_internal.Real64ArrayRef___len__(*args, **kwargs)

    def __repr__(*args, **kwargs):
        """__repr__(self) -> string"""
        return _engine_internal.Real64ArrayRef___repr__(*args, **kwargs)

    def __str__(*args, **kwargs):
        """__str__(self) -> string"""
        return _engine_internal.Real64ArrayRef___str__(*args, **kwargs)

    def asNumpyArray(*args, **kwargs):
        """asNumpyArray(self) -> PyObject"""
        return _engine_internal.Real64ArrayRef_asNumpyArray(*args, **kwargs)

    __swig_destroy__ = _engine_internal.delete_Real64ArrayRef
Real64ArrayRef_swigregister = _engine_internal.Real64ArrayRef_swigregister
Real64ArrayRef_swigregister(Real64ArrayRef)

class OS(object):
    """Proxy of C++ OS class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def getProcessMemoryUsage(*args, **kwargs):
        """getProcessMemoryUsage(OUTPUT, OUTPUT)"""
        return _engine_internal.OS_getProcessMemoryUsage(*args, **kwargs)

    getProcessMemoryUsage = staticmethod(getProcessMemoryUsage)
    def __init__(self, *args, **kwargs): 
        """__init__(self) -> OS"""
        this = _engine_internal.new_OS(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _engine_internal.delete_OS
OS_swigregister = _engine_internal.OS_swigregister
OS_swigregister(OS)

def OS_getProcessMemoryUsage(*args):
  """OS_getProcessMemoryUsage(OUTPUT, OUTPUT)"""
  return _engine_internal.OS_getProcessMemoryUsage(*args)



