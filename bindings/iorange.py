# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.36
#
# Don't modify this file, modify the SWIG interface instead.

import _iorange
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


# ----------------------------------------------------------------------
# Numenta Platform for Intelligent Computing (NuPIC)
# Copyright (C) 2013, Numenta, Inc.  Unless you have purchased from
# Numenta, Inc. a separate commercial license for this software code, the
# following terms and conditions apply:
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 3 as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see http://www.gnu.org/licenses.
#
# http://numenta.org/licenses/
# ----------------------------------------------------------------------

NTA_BasicType_Byte = _iorange.NTA_BasicType_Byte
NTA_BasicType_Int16 = _iorange.NTA_BasicType_Int16
NTA_BasicType_UInt16 = _iorange.NTA_BasicType_UInt16
NTA_BasicType_Int32 = _iorange.NTA_BasicType_Int32
NTA_BasicType_UInt32 = _iorange.NTA_BasicType_UInt32
NTA_BasicType_Int64 = _iorange.NTA_BasicType_Int64
NTA_BasicType_UInt64 = _iorange.NTA_BasicType_UInt64
NTA_BasicType_Real32 = _iorange.NTA_BasicType_Real32
NTA_BasicType_Real64 = _iorange.NTA_BasicType_Real64
NTA_BasicType_Handle = _iorange.NTA_BasicType_Handle
NTA_BasicType_Last = _iorange.NTA_BasicType_Last
NTA_BasicType_Real = _iorange.NTA_BasicType_Real
NTA_REAL_TYPE_STRING = _iorange.NTA_REAL_TYPE_STRING
NTA_LogLevel_None = _iorange.NTA_LogLevel_None
NTA_LogLevel_Minimal = _iorange.NTA_LogLevel_Minimal
NTA_LogLevel_Normal = _iorange.NTA_LogLevel_Normal
NTA_LogLevel_Verbose = _iorange.NTA_LogLevel_Verbose
LogLevel_None = _iorange.LogLevel_None
LogLevel_Minimal = _iorange.LogLevel_Minimal
LogLevel_Normal = _iorange.LogLevel_Normal
LogLevel_Verbose = _iorange.LogLevel_Verbose
class PySwigIterator(object):
    """Proxy of C++ PySwigIterator class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _iorange.delete_PySwigIterator
    def value(*args, **kwargs):
        """value(self) -> PyObject"""
        return _iorange.PySwigIterator_value(*args, **kwargs)

    def incr(*args, **kwargs):
        """incr(self, n=1) -> PySwigIterator"""
        return _iorange.PySwigIterator_incr(*args, **kwargs)

    def decr(*args, **kwargs):
        """decr(self, n=1) -> PySwigIterator"""
        return _iorange.PySwigIterator_decr(*args, **kwargs)

    def distance(*args, **kwargs):
        """distance(self, x) -> ptrdiff_t"""
        return _iorange.PySwigIterator_distance(*args, **kwargs)

    def equal(*args, **kwargs):
        """equal(self, x) -> bool"""
        return _iorange.PySwigIterator_equal(*args, **kwargs)

    def copy(*args, **kwargs):
        """copy(self) -> PySwigIterator"""
        return _iorange.PySwigIterator_copy(*args, **kwargs)

    def next(*args, **kwargs):
        """next(self) -> PyObject"""
        return _iorange.PySwigIterator_next(*args, **kwargs)

    def previous(*args, **kwargs):
        """previous(self) -> PyObject"""
        return _iorange.PySwigIterator_previous(*args, **kwargs)

    def advance(*args, **kwargs):
        """advance(self, n) -> PySwigIterator"""
        return _iorange.PySwigIterator_advance(*args, **kwargs)

    def __eq__(*args, **kwargs):
        """__eq__(self, x) -> bool"""
        return _iorange.PySwigIterator___eq__(*args, **kwargs)

    def __ne__(*args, **kwargs):
        """__ne__(self, x) -> bool"""
        return _iorange.PySwigIterator___ne__(*args, **kwargs)

    def __iadd__(*args, **kwargs):
        """__iadd__(self, n) -> PySwigIterator"""
        return _iorange.PySwigIterator___iadd__(*args, **kwargs)

    def __isub__(*args, **kwargs):
        """__isub__(self, n) -> PySwigIterator"""
        return _iorange.PySwigIterator___isub__(*args, **kwargs)

    def __add__(*args, **kwargs):
        """__add__(self, n) -> PySwigIterator"""
        return _iorange.PySwigIterator___add__(*args, **kwargs)

    def __sub__(*args):
        """
        __sub__(self, n) -> PySwigIterator
        __sub__(self, x) -> ptrdiff_t
        """
        return _iorange.PySwigIterator___sub__(*args)

    def __iter__(self): return self
PySwigIterator_swigregister = _iorange.PySwigIterator_swigregister
PySwigIterator_swigregister(PySwigIterator)

class VectorOfInt32(object):
    """Proxy of C++ VectorOfInt32 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def iterator(*args, **kwargs):
        """iterator(self, PYTHON_SELF) -> PySwigIterator"""
        return _iorange.VectorOfInt32_iterator(*args, **kwargs)

    def __iter__(self): return self.iterator()
    def __nonzero__(*args, **kwargs):
        """__nonzero__(self) -> bool"""
        return _iorange.VectorOfInt32___nonzero__(*args, **kwargs)

    def __len__(*args, **kwargs):
        """__len__(self) -> std::vector<(int)>::size_type"""
        return _iorange.VectorOfInt32___len__(*args, **kwargs)

    def pop(*args, **kwargs):
        """pop(self) -> std::vector<(int)>::value_type"""
        return _iorange.VectorOfInt32_pop(*args, **kwargs)

    def __getslice__(*args, **kwargs):
        """__getslice__(self, i, j) -> VectorOfInt32"""
        return _iorange.VectorOfInt32___getslice__(*args, **kwargs)

    def __setslice__(*args, **kwargs):
        """__setslice__(self, i, j, v)"""
        return _iorange.VectorOfInt32___setslice__(*args, **kwargs)

    def __delslice__(*args, **kwargs):
        """__delslice__(self, i, j)"""
        return _iorange.VectorOfInt32___delslice__(*args, **kwargs)

    def __delitem__(*args, **kwargs):
        """__delitem__(self, i)"""
        return _iorange.VectorOfInt32___delitem__(*args, **kwargs)

    def __getitem__(*args, **kwargs):
        """__getitem__(self, i) -> std::vector<(int)>::value_type"""
        return _iorange.VectorOfInt32___getitem__(*args, **kwargs)

    def __setitem__(*args, **kwargs):
        """__setitem__(self, i, x)"""
        return _iorange.VectorOfInt32___setitem__(*args, **kwargs)

    def append(*args, **kwargs):
        """append(self, x)"""
        return _iorange.VectorOfInt32_append(*args, **kwargs)

    def empty(*args, **kwargs):
        """empty(self) -> bool"""
        return _iorange.VectorOfInt32_empty(*args, **kwargs)

    def size(*args, **kwargs):
        """size(self) -> std::vector<(int)>::size_type"""
        return _iorange.VectorOfInt32_size(*args, **kwargs)

    def clear(*args, **kwargs):
        """clear(self)"""
        return _iorange.VectorOfInt32_clear(*args, **kwargs)

    def swap(*args, **kwargs):
        """swap(self, v)"""
        return _iorange.VectorOfInt32_swap(*args, **kwargs)

    def get_allocator(*args, **kwargs):
        """get_allocator(self) -> std::vector<(int)>::allocator_type"""
        return _iorange.VectorOfInt32_get_allocator(*args, **kwargs)

    def begin(*args, **kwargs):
        """begin(self) -> std::vector<(int)>::const_iterator"""
        return _iorange.VectorOfInt32_begin(*args, **kwargs)

    def end(*args, **kwargs):
        """end(self) -> std::vector<(int)>::const_iterator"""
        return _iorange.VectorOfInt32_end(*args, **kwargs)

    def rbegin(*args, **kwargs):
        """rbegin(self) -> std::vector<(int)>::const_reverse_iterator"""
        return _iorange.VectorOfInt32_rbegin(*args, **kwargs)

    def rend(*args, **kwargs):
        """rend(self) -> std::vector<(int)>::const_reverse_iterator"""
        return _iorange.VectorOfInt32_rend(*args, **kwargs)

    def pop_back(*args, **kwargs):
        """pop_back(self)"""
        return _iorange.VectorOfInt32_pop_back(*args, **kwargs)

    def erase(*args):
        """
        erase(self, pos) -> std::vector<(int)>::iterator
        erase(self, first, last) -> std::vector<(int)>::iterator
        """
        return _iorange.VectorOfInt32_erase(*args)

    def __init__(self, *args): 
        """
        __init__(self) -> VectorOfInt32
        __init__(self, ?) -> VectorOfInt32
        __init__(self, size) -> VectorOfInt32
        __init__(self, size, value) -> VectorOfInt32
        """
        this = _iorange.new_VectorOfInt32(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(*args, **kwargs):
        """push_back(self, x)"""
        return _iorange.VectorOfInt32_push_back(*args, **kwargs)

    def front(*args, **kwargs):
        """front(self) -> std::vector<(int)>::value_type"""
        return _iorange.VectorOfInt32_front(*args, **kwargs)

    def back(*args, **kwargs):
        """back(self) -> std::vector<(int)>::value_type"""
        return _iorange.VectorOfInt32_back(*args, **kwargs)

    def assign(*args, **kwargs):
        """assign(self, n, x)"""
        return _iorange.VectorOfInt32_assign(*args, **kwargs)

    def resize(*args):
        """
        resize(self, new_size)
        resize(self, new_size, x)
        """
        return _iorange.VectorOfInt32_resize(*args)

    def insert(*args):
        """
        insert(self, pos, x) -> std::vector<(int)>::iterator
        insert(self, pos, n, x)
        """
        return _iorange.VectorOfInt32_insert(*args)

    def reserve(*args, **kwargs):
        """reserve(self, n)"""
        return _iorange.VectorOfInt32_reserve(*args, **kwargs)

    def capacity(*args, **kwargs):
        """capacity(self) -> std::vector<(int)>::size_type"""
        return _iorange.VectorOfInt32_capacity(*args, **kwargs)

    __swig_destroy__ = _iorange.delete_VectorOfInt32
VectorOfInt32_swigregister = _iorange.VectorOfInt32_swigregister
VectorOfInt32_swigregister(VectorOfInt32)

class VectorOfInt64(object):
    """Proxy of C++ VectorOfInt64 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def iterator(*args, **kwargs):
        """iterator(self, PYTHON_SELF) -> PySwigIterator"""
        return _iorange.VectorOfInt64_iterator(*args, **kwargs)

    def __iter__(self): return self.iterator()
    def __nonzero__(*args, **kwargs):
        """__nonzero__(self) -> bool"""
        return _iorange.VectorOfInt64___nonzero__(*args, **kwargs)

    def __len__(*args, **kwargs):
        """__len__(self) -> std::vector<(long)>::size_type"""
        return _iorange.VectorOfInt64___len__(*args, **kwargs)

    def pop(*args, **kwargs):
        """pop(self) -> std::vector<(long)>::value_type"""
        return _iorange.VectorOfInt64_pop(*args, **kwargs)

    def __getslice__(*args, **kwargs):
        """__getslice__(self, i, j) -> VectorOfInt64"""
        return _iorange.VectorOfInt64___getslice__(*args, **kwargs)

    def __setslice__(*args, **kwargs):
        """__setslice__(self, i, j, v)"""
        return _iorange.VectorOfInt64___setslice__(*args, **kwargs)

    def __delslice__(*args, **kwargs):
        """__delslice__(self, i, j)"""
        return _iorange.VectorOfInt64___delslice__(*args, **kwargs)

    def __delitem__(*args, **kwargs):
        """__delitem__(self, i)"""
        return _iorange.VectorOfInt64___delitem__(*args, **kwargs)

    def __getitem__(*args, **kwargs):
        """__getitem__(self, i) -> std::vector<(long)>::value_type"""
        return _iorange.VectorOfInt64___getitem__(*args, **kwargs)

    def __setitem__(*args, **kwargs):
        """__setitem__(self, i, x)"""
        return _iorange.VectorOfInt64___setitem__(*args, **kwargs)

    def append(*args, **kwargs):
        """append(self, x)"""
        return _iorange.VectorOfInt64_append(*args, **kwargs)

    def empty(*args, **kwargs):
        """empty(self) -> bool"""
        return _iorange.VectorOfInt64_empty(*args, **kwargs)

    def size(*args, **kwargs):
        """size(self) -> std::vector<(long)>::size_type"""
        return _iorange.VectorOfInt64_size(*args, **kwargs)

    def clear(*args, **kwargs):
        """clear(self)"""
        return _iorange.VectorOfInt64_clear(*args, **kwargs)

    def swap(*args, **kwargs):
        """swap(self, v)"""
        return _iorange.VectorOfInt64_swap(*args, **kwargs)

    def get_allocator(*args, **kwargs):
        """get_allocator(self) -> std::vector<(long)>::allocator_type"""
        return _iorange.VectorOfInt64_get_allocator(*args, **kwargs)

    def begin(*args, **kwargs):
        """begin(self) -> std::vector<(long)>::const_iterator"""
        return _iorange.VectorOfInt64_begin(*args, **kwargs)

    def end(*args, **kwargs):
        """end(self) -> std::vector<(long)>::const_iterator"""
        return _iorange.VectorOfInt64_end(*args, **kwargs)

    def rbegin(*args, **kwargs):
        """rbegin(self) -> std::vector<(long)>::const_reverse_iterator"""
        return _iorange.VectorOfInt64_rbegin(*args, **kwargs)

    def rend(*args, **kwargs):
        """rend(self) -> std::vector<(long)>::const_reverse_iterator"""
        return _iorange.VectorOfInt64_rend(*args, **kwargs)

    def pop_back(*args, **kwargs):
        """pop_back(self)"""
        return _iorange.VectorOfInt64_pop_back(*args, **kwargs)

    def erase(*args):
        """
        erase(self, pos) -> std::vector<(long)>::iterator
        erase(self, first, last) -> std::vector<(long)>::iterator
        """
        return _iorange.VectorOfInt64_erase(*args)

    def __init__(self, *args): 
        """
        __init__(self) -> VectorOfInt64
        __init__(self, ?) -> VectorOfInt64
        __init__(self, size) -> VectorOfInt64
        __init__(self, size, value) -> VectorOfInt64
        """
        this = _iorange.new_VectorOfInt64(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(*args, **kwargs):
        """push_back(self, x)"""
        return _iorange.VectorOfInt64_push_back(*args, **kwargs)

    def front(*args, **kwargs):
        """front(self) -> std::vector<(long)>::value_type"""
        return _iorange.VectorOfInt64_front(*args, **kwargs)

    def back(*args, **kwargs):
        """back(self) -> std::vector<(long)>::value_type"""
        return _iorange.VectorOfInt64_back(*args, **kwargs)

    def assign(*args, **kwargs):
        """assign(self, n, x)"""
        return _iorange.VectorOfInt64_assign(*args, **kwargs)

    def resize(*args):
        """
        resize(self, new_size)
        resize(self, new_size, x)
        """
        return _iorange.VectorOfInt64_resize(*args)

    def insert(*args):
        """
        insert(self, pos, x) -> std::vector<(long)>::iterator
        insert(self, pos, n, x)
        """
        return _iorange.VectorOfInt64_insert(*args)

    def reserve(*args, **kwargs):
        """reserve(self, n)"""
        return _iorange.VectorOfInt64_reserve(*args, **kwargs)

    def capacity(*args, **kwargs):
        """capacity(self) -> std::vector<(long)>::size_type"""
        return _iorange.VectorOfInt64_capacity(*args, **kwargs)

    __swig_destroy__ = _iorange.delete_VectorOfInt64
VectorOfInt64_swigregister = _iorange.VectorOfInt64_swigregister
VectorOfInt64_swigregister(VectorOfInt64)

class VectorOfUInt32(object):
    """Proxy of C++ VectorOfUInt32 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def iterator(*args, **kwargs):
        """iterator(self, PYTHON_SELF) -> PySwigIterator"""
        return _iorange.VectorOfUInt32_iterator(*args, **kwargs)

    def __iter__(self): return self.iterator()
    def __nonzero__(*args, **kwargs):
        """__nonzero__(self) -> bool"""
        return _iorange.VectorOfUInt32___nonzero__(*args, **kwargs)

    def __len__(*args, **kwargs):
        """__len__(self) -> std::vector<(unsigned int)>::size_type"""
        return _iorange.VectorOfUInt32___len__(*args, **kwargs)

    def pop(*args, **kwargs):
        """pop(self) -> std::vector<(unsigned int)>::value_type"""
        return _iorange.VectorOfUInt32_pop(*args, **kwargs)

    def __getslice__(*args, **kwargs):
        """__getslice__(self, i, j) -> VectorOfUInt32"""
        return _iorange.VectorOfUInt32___getslice__(*args, **kwargs)

    def __setslice__(*args, **kwargs):
        """__setslice__(self, i, j, v)"""
        return _iorange.VectorOfUInt32___setslice__(*args, **kwargs)

    def __delslice__(*args, **kwargs):
        """__delslice__(self, i, j)"""
        return _iorange.VectorOfUInt32___delslice__(*args, **kwargs)

    def __delitem__(*args, **kwargs):
        """__delitem__(self, i)"""
        return _iorange.VectorOfUInt32___delitem__(*args, **kwargs)

    def __getitem__(*args, **kwargs):
        """__getitem__(self, i) -> std::vector<(unsigned int)>::value_type"""
        return _iorange.VectorOfUInt32___getitem__(*args, **kwargs)

    def __setitem__(*args, **kwargs):
        """__setitem__(self, i, x)"""
        return _iorange.VectorOfUInt32___setitem__(*args, **kwargs)

    def append(*args, **kwargs):
        """append(self, x)"""
        return _iorange.VectorOfUInt32_append(*args, **kwargs)

    def empty(*args, **kwargs):
        """empty(self) -> bool"""
        return _iorange.VectorOfUInt32_empty(*args, **kwargs)

    def size(*args, **kwargs):
        """size(self) -> std::vector<(unsigned int)>::size_type"""
        return _iorange.VectorOfUInt32_size(*args, **kwargs)

    def clear(*args, **kwargs):
        """clear(self)"""
        return _iorange.VectorOfUInt32_clear(*args, **kwargs)

    def swap(*args, **kwargs):
        """swap(self, v)"""
        return _iorange.VectorOfUInt32_swap(*args, **kwargs)

    def get_allocator(*args, **kwargs):
        """get_allocator(self) -> std::vector<(unsigned int)>::allocator_type"""
        return _iorange.VectorOfUInt32_get_allocator(*args, **kwargs)

    def begin(*args, **kwargs):
        """begin(self) -> std::vector<(unsigned int)>::const_iterator"""
        return _iorange.VectorOfUInt32_begin(*args, **kwargs)

    def end(*args, **kwargs):
        """end(self) -> std::vector<(unsigned int)>::const_iterator"""
        return _iorange.VectorOfUInt32_end(*args, **kwargs)

    def rbegin(*args, **kwargs):
        """rbegin(self) -> std::vector<(unsigned int)>::const_reverse_iterator"""
        return _iorange.VectorOfUInt32_rbegin(*args, **kwargs)

    def rend(*args, **kwargs):
        """rend(self) -> std::vector<(unsigned int)>::const_reverse_iterator"""
        return _iorange.VectorOfUInt32_rend(*args, **kwargs)

    def pop_back(*args, **kwargs):
        """pop_back(self)"""
        return _iorange.VectorOfUInt32_pop_back(*args, **kwargs)

    def erase(*args):
        """
        erase(self, pos) -> std::vector<(unsigned int)>::iterator
        erase(self, first, last) -> std::vector<(unsigned int)>::iterator
        """
        return _iorange.VectorOfUInt32_erase(*args)

    def __init__(self, *args): 
        """
        __init__(self) -> VectorOfUInt32
        __init__(self, ?) -> VectorOfUInt32
        __init__(self, size) -> VectorOfUInt32
        __init__(self, size, value) -> VectorOfUInt32
        """
        this = _iorange.new_VectorOfUInt32(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(*args, **kwargs):
        """push_back(self, x)"""
        return _iorange.VectorOfUInt32_push_back(*args, **kwargs)

    def front(*args, **kwargs):
        """front(self) -> std::vector<(unsigned int)>::value_type"""
        return _iorange.VectorOfUInt32_front(*args, **kwargs)

    def back(*args, **kwargs):
        """back(self) -> std::vector<(unsigned int)>::value_type"""
        return _iorange.VectorOfUInt32_back(*args, **kwargs)

    def assign(*args, **kwargs):
        """assign(self, n, x)"""
        return _iorange.VectorOfUInt32_assign(*args, **kwargs)

    def resize(*args):
        """
        resize(self, new_size)
        resize(self, new_size, x)
        """
        return _iorange.VectorOfUInt32_resize(*args)

    def insert(*args):
        """
        insert(self, pos, x) -> std::vector<(unsigned int)>::iterator
        insert(self, pos, n, x)
        """
        return _iorange.VectorOfUInt32_insert(*args)

    def reserve(*args, **kwargs):
        """reserve(self, n)"""
        return _iorange.VectorOfUInt32_reserve(*args, **kwargs)

    def capacity(*args, **kwargs):
        """capacity(self) -> std::vector<(unsigned int)>::size_type"""
        return _iorange.VectorOfUInt32_capacity(*args, **kwargs)

    __swig_destroy__ = _iorange.delete_VectorOfUInt32
VectorOfUInt32_swigregister = _iorange.VectorOfUInt32_swigregister
VectorOfUInt32_swigregister(VectorOfUInt32)

class VectorOfUInt64(object):
    """Proxy of C++ VectorOfUInt64 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def iterator(*args, **kwargs):
        """iterator(self, PYTHON_SELF) -> PySwigIterator"""
        return _iorange.VectorOfUInt64_iterator(*args, **kwargs)

    def __iter__(self): return self.iterator()
    def __nonzero__(*args, **kwargs):
        """__nonzero__(self) -> bool"""
        return _iorange.VectorOfUInt64___nonzero__(*args, **kwargs)

    def __len__(*args, **kwargs):
        """__len__(self) -> std::vector<(unsigned long)>::size_type"""
        return _iorange.VectorOfUInt64___len__(*args, **kwargs)

    def pop(*args, **kwargs):
        """pop(self) -> std::vector<(unsigned long)>::value_type"""
        return _iorange.VectorOfUInt64_pop(*args, **kwargs)

    def __getslice__(*args, **kwargs):
        """__getslice__(self, i, j) -> VectorOfUInt64"""
        return _iorange.VectorOfUInt64___getslice__(*args, **kwargs)

    def __setslice__(*args, **kwargs):
        """__setslice__(self, i, j, v)"""
        return _iorange.VectorOfUInt64___setslice__(*args, **kwargs)

    def __delslice__(*args, **kwargs):
        """__delslice__(self, i, j)"""
        return _iorange.VectorOfUInt64___delslice__(*args, **kwargs)

    def __delitem__(*args, **kwargs):
        """__delitem__(self, i)"""
        return _iorange.VectorOfUInt64___delitem__(*args, **kwargs)

    def __getitem__(*args, **kwargs):
        """__getitem__(self, i) -> std::vector<(unsigned long)>::value_type"""
        return _iorange.VectorOfUInt64___getitem__(*args, **kwargs)

    def __setitem__(*args, **kwargs):
        """__setitem__(self, i, x)"""
        return _iorange.VectorOfUInt64___setitem__(*args, **kwargs)

    def append(*args, **kwargs):
        """append(self, x)"""
        return _iorange.VectorOfUInt64_append(*args, **kwargs)

    def empty(*args, **kwargs):
        """empty(self) -> bool"""
        return _iorange.VectorOfUInt64_empty(*args, **kwargs)

    def size(*args, **kwargs):
        """size(self) -> std::vector<(unsigned long)>::size_type"""
        return _iorange.VectorOfUInt64_size(*args, **kwargs)

    def clear(*args, **kwargs):
        """clear(self)"""
        return _iorange.VectorOfUInt64_clear(*args, **kwargs)

    def swap(*args, **kwargs):
        """swap(self, v)"""
        return _iorange.VectorOfUInt64_swap(*args, **kwargs)

    def get_allocator(*args, **kwargs):
        """get_allocator(self) -> std::vector<(unsigned long)>::allocator_type"""
        return _iorange.VectorOfUInt64_get_allocator(*args, **kwargs)

    def begin(*args, **kwargs):
        """begin(self) -> std::vector<(unsigned long)>::const_iterator"""
        return _iorange.VectorOfUInt64_begin(*args, **kwargs)

    def end(*args, **kwargs):
        """end(self) -> std::vector<(unsigned long)>::const_iterator"""
        return _iorange.VectorOfUInt64_end(*args, **kwargs)

    def rbegin(*args, **kwargs):
        """rbegin(self) -> std::vector<(unsigned long)>::const_reverse_iterator"""
        return _iorange.VectorOfUInt64_rbegin(*args, **kwargs)

    def rend(*args, **kwargs):
        """rend(self) -> std::vector<(unsigned long)>::const_reverse_iterator"""
        return _iorange.VectorOfUInt64_rend(*args, **kwargs)

    def pop_back(*args, **kwargs):
        """pop_back(self)"""
        return _iorange.VectorOfUInt64_pop_back(*args, **kwargs)

    def erase(*args):
        """
        erase(self, pos) -> std::vector<(unsigned long)>::iterator
        erase(self, first, last) -> std::vector<(unsigned long)>::iterator
        """
        return _iorange.VectorOfUInt64_erase(*args)

    def __init__(self, *args): 
        """
        __init__(self) -> VectorOfUInt64
        __init__(self, ?) -> VectorOfUInt64
        __init__(self, size) -> VectorOfUInt64
        __init__(self, size, value) -> VectorOfUInt64
        """
        this = _iorange.new_VectorOfUInt64(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(*args, **kwargs):
        """push_back(self, x)"""
        return _iorange.VectorOfUInt64_push_back(*args, **kwargs)

    def front(*args, **kwargs):
        """front(self) -> std::vector<(unsigned long)>::value_type"""
        return _iorange.VectorOfUInt64_front(*args, **kwargs)

    def back(*args, **kwargs):
        """back(self) -> std::vector<(unsigned long)>::value_type"""
        return _iorange.VectorOfUInt64_back(*args, **kwargs)

    def assign(*args, **kwargs):
        """assign(self, n, x)"""
        return _iorange.VectorOfUInt64_assign(*args, **kwargs)

    def resize(*args):
        """
        resize(self, new_size)
        resize(self, new_size, x)
        """
        return _iorange.VectorOfUInt64_resize(*args)

    def insert(*args):
        """
        insert(self, pos, x) -> std::vector<(unsigned long)>::iterator
        insert(self, pos, n, x)
        """
        return _iorange.VectorOfUInt64_insert(*args)

    def reserve(*args, **kwargs):
        """reserve(self, n)"""
        return _iorange.VectorOfUInt64_reserve(*args, **kwargs)

    def capacity(*args, **kwargs):
        """capacity(self) -> std::vector<(unsigned long)>::size_type"""
        return _iorange.VectorOfUInt64_capacity(*args, **kwargs)

    __swig_destroy__ = _iorange.delete_VectorOfUInt64
VectorOfUInt64_swigregister = _iorange.VectorOfUInt64_swigregister
VectorOfUInt64_swigregister(VectorOfUInt64)

class FloatVector(object):
    """Proxy of C++ FloatVector class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def iterator(*args, **kwargs):
        """iterator(self, PYTHON_SELF) -> PySwigIterator"""
        return _iorange.FloatVector_iterator(*args, **kwargs)

    def __iter__(self): return self.iterator()
    def __nonzero__(*args, **kwargs):
        """__nonzero__(self) -> bool"""
        return _iorange.FloatVector___nonzero__(*args, **kwargs)

    def __len__(*args, **kwargs):
        """__len__(self) -> std::vector<(float)>::size_type"""
        return _iorange.FloatVector___len__(*args, **kwargs)

    def pop(*args, **kwargs):
        """pop(self) -> std::vector<(float)>::value_type"""
        return _iorange.FloatVector_pop(*args, **kwargs)

    def __getslice__(*args, **kwargs):
        """__getslice__(self, i, j) -> FloatVector"""
        return _iorange.FloatVector___getslice__(*args, **kwargs)

    def __setslice__(*args, **kwargs):
        """__setslice__(self, i, j, v)"""
        return _iorange.FloatVector___setslice__(*args, **kwargs)

    def __delslice__(*args, **kwargs):
        """__delslice__(self, i, j)"""
        return _iorange.FloatVector___delslice__(*args, **kwargs)

    def __delitem__(*args, **kwargs):
        """__delitem__(self, i)"""
        return _iorange.FloatVector___delitem__(*args, **kwargs)

    def __getitem__(*args, **kwargs):
        """__getitem__(self, i) -> std::vector<(float)>::value_type"""
        return _iorange.FloatVector___getitem__(*args, **kwargs)

    def __setitem__(*args, **kwargs):
        """__setitem__(self, i, x)"""
        return _iorange.FloatVector___setitem__(*args, **kwargs)

    def append(*args, **kwargs):
        """append(self, x)"""
        return _iorange.FloatVector_append(*args, **kwargs)

    def empty(*args, **kwargs):
        """empty(self) -> bool"""
        return _iorange.FloatVector_empty(*args, **kwargs)

    def size(*args, **kwargs):
        """size(self) -> std::vector<(float)>::size_type"""
        return _iorange.FloatVector_size(*args, **kwargs)

    def clear(*args, **kwargs):
        """clear(self)"""
        return _iorange.FloatVector_clear(*args, **kwargs)

    def swap(*args, **kwargs):
        """swap(self, v)"""
        return _iorange.FloatVector_swap(*args, **kwargs)

    def get_allocator(*args, **kwargs):
        """get_allocator(self) -> std::vector<(float)>::allocator_type"""
        return _iorange.FloatVector_get_allocator(*args, **kwargs)

    def begin(*args, **kwargs):
        """begin(self) -> std::vector<(float)>::const_iterator"""
        return _iorange.FloatVector_begin(*args, **kwargs)

    def end(*args, **kwargs):
        """end(self) -> std::vector<(float)>::const_iterator"""
        return _iorange.FloatVector_end(*args, **kwargs)

    def rbegin(*args, **kwargs):
        """rbegin(self) -> std::vector<(float)>::const_reverse_iterator"""
        return _iorange.FloatVector_rbegin(*args, **kwargs)

    def rend(*args, **kwargs):
        """rend(self) -> std::vector<(float)>::const_reverse_iterator"""
        return _iorange.FloatVector_rend(*args, **kwargs)

    def pop_back(*args, **kwargs):
        """pop_back(self)"""
        return _iorange.FloatVector_pop_back(*args, **kwargs)

    def erase(*args):
        """
        erase(self, pos) -> std::vector<(float)>::iterator
        erase(self, first, last) -> std::vector<(float)>::iterator
        """
        return _iorange.FloatVector_erase(*args)

    def __init__(self, *args): 
        """
        __init__(self) -> FloatVector
        __init__(self, ?) -> FloatVector
        __init__(self, size) -> FloatVector
        __init__(self, size, value) -> FloatVector
        """
        this = _iorange.new_FloatVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(*args, **kwargs):
        """push_back(self, x)"""
        return _iorange.FloatVector_push_back(*args, **kwargs)

    def front(*args, **kwargs):
        """front(self) -> std::vector<(float)>::value_type"""
        return _iorange.FloatVector_front(*args, **kwargs)

    def back(*args, **kwargs):
        """back(self) -> std::vector<(float)>::value_type"""
        return _iorange.FloatVector_back(*args, **kwargs)

    def assign(*args, **kwargs):
        """assign(self, n, x)"""
        return _iorange.FloatVector_assign(*args, **kwargs)

    def resize(*args):
        """
        resize(self, new_size)
        resize(self, new_size, x)
        """
        return _iorange.FloatVector_resize(*args)

    def insert(*args):
        """
        insert(self, pos, x) -> std::vector<(float)>::iterator
        insert(self, pos, n, x)
        """
        return _iorange.FloatVector_insert(*args)

    def reserve(*args, **kwargs):
        """reserve(self, n)"""
        return _iorange.FloatVector_reserve(*args, **kwargs)

    def capacity(*args, **kwargs):
        """capacity(self) -> std::vector<(float)>::size_type"""
        return _iorange.FloatVector_capacity(*args, **kwargs)

    __swig_destroy__ = _iorange.delete_FloatVector
FloatVector_swigregister = _iorange.FloatVector_swigregister
FloatVector_swigregister(FloatVector)

class DoubleVector(object):
    """Proxy of C++ DoubleVector class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def iterator(*args, **kwargs):
        """iterator(self, PYTHON_SELF) -> PySwigIterator"""
        return _iorange.DoubleVector_iterator(*args, **kwargs)

    def __iter__(self): return self.iterator()
    def __nonzero__(*args, **kwargs):
        """__nonzero__(self) -> bool"""
        return _iorange.DoubleVector___nonzero__(*args, **kwargs)

    def __len__(*args, **kwargs):
        """__len__(self) -> std::vector<(double)>::size_type"""
        return _iorange.DoubleVector___len__(*args, **kwargs)

    def pop(*args, **kwargs):
        """pop(self) -> std::vector<(double)>::value_type"""
        return _iorange.DoubleVector_pop(*args, **kwargs)

    def __getslice__(*args, **kwargs):
        """__getslice__(self, i, j) -> DoubleVector"""
        return _iorange.DoubleVector___getslice__(*args, **kwargs)

    def __setslice__(*args, **kwargs):
        """__setslice__(self, i, j, v)"""
        return _iorange.DoubleVector___setslice__(*args, **kwargs)

    def __delslice__(*args, **kwargs):
        """__delslice__(self, i, j)"""
        return _iorange.DoubleVector___delslice__(*args, **kwargs)

    def __delitem__(*args, **kwargs):
        """__delitem__(self, i)"""
        return _iorange.DoubleVector___delitem__(*args, **kwargs)

    def __getitem__(*args, **kwargs):
        """__getitem__(self, i) -> std::vector<(double)>::value_type"""
        return _iorange.DoubleVector___getitem__(*args, **kwargs)

    def __setitem__(*args, **kwargs):
        """__setitem__(self, i, x)"""
        return _iorange.DoubleVector___setitem__(*args, **kwargs)

    def append(*args, **kwargs):
        """append(self, x)"""
        return _iorange.DoubleVector_append(*args, **kwargs)

    def empty(*args, **kwargs):
        """empty(self) -> bool"""
        return _iorange.DoubleVector_empty(*args, **kwargs)

    def size(*args, **kwargs):
        """size(self) -> std::vector<(double)>::size_type"""
        return _iorange.DoubleVector_size(*args, **kwargs)

    def clear(*args, **kwargs):
        """clear(self)"""
        return _iorange.DoubleVector_clear(*args, **kwargs)

    def swap(*args, **kwargs):
        """swap(self, v)"""
        return _iorange.DoubleVector_swap(*args, **kwargs)

    def get_allocator(*args, **kwargs):
        """get_allocator(self) -> std::vector<(double)>::allocator_type"""
        return _iorange.DoubleVector_get_allocator(*args, **kwargs)

    def begin(*args, **kwargs):
        """begin(self) -> std::vector<(double)>::const_iterator"""
        return _iorange.DoubleVector_begin(*args, **kwargs)

    def end(*args, **kwargs):
        """end(self) -> std::vector<(double)>::const_iterator"""
        return _iorange.DoubleVector_end(*args, **kwargs)

    def rbegin(*args, **kwargs):
        """rbegin(self) -> std::vector<(double)>::const_reverse_iterator"""
        return _iorange.DoubleVector_rbegin(*args, **kwargs)

    def rend(*args, **kwargs):
        """rend(self) -> std::vector<(double)>::const_reverse_iterator"""
        return _iorange.DoubleVector_rend(*args, **kwargs)

    def pop_back(*args, **kwargs):
        """pop_back(self)"""
        return _iorange.DoubleVector_pop_back(*args, **kwargs)

    def erase(*args):
        """
        erase(self, pos) -> std::vector<(double)>::iterator
        erase(self, first, last) -> std::vector<(double)>::iterator
        """
        return _iorange.DoubleVector_erase(*args)

    def __init__(self, *args): 
        """
        __init__(self) -> DoubleVector
        __init__(self, ?) -> DoubleVector
        __init__(self, size) -> DoubleVector
        __init__(self, size, value) -> DoubleVector
        """
        this = _iorange.new_DoubleVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(*args, **kwargs):
        """push_back(self, x)"""
        return _iorange.DoubleVector_push_back(*args, **kwargs)

    def front(*args, **kwargs):
        """front(self) -> std::vector<(double)>::value_type"""
        return _iorange.DoubleVector_front(*args, **kwargs)

    def back(*args, **kwargs):
        """back(self) -> std::vector<(double)>::value_type"""
        return _iorange.DoubleVector_back(*args, **kwargs)

    def assign(*args, **kwargs):
        """assign(self, n, x)"""
        return _iorange.DoubleVector_assign(*args, **kwargs)

    def resize(*args):
        """
        resize(self, new_size)
        resize(self, new_size, x)
        """
        return _iorange.DoubleVector_resize(*args)

    def insert(*args):
        """
        insert(self, pos, x) -> std::vector<(double)>::iterator
        insert(self, pos, n, x)
        """
        return _iorange.DoubleVector_insert(*args)

    def reserve(*args, **kwargs):
        """reserve(self, n)"""
        return _iorange.DoubleVector_reserve(*args, **kwargs)

    def capacity(*args, **kwargs):
        """capacity(self) -> std::vector<(double)>::size_type"""
        return _iorange.DoubleVector_capacity(*args, **kwargs)

    __swig_destroy__ = _iorange.delete_DoubleVector
DoubleVector_swigregister = _iorange.DoubleVector_swigregister
DoubleVector_swigregister(DoubleVector)

class StringVector(object):
    """Proxy of C++ StringVector class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def iterator(*args, **kwargs):
        """iterator(self, PYTHON_SELF) -> PySwigIterator"""
        return _iorange.StringVector_iterator(*args, **kwargs)

    def __iter__(self): return self.iterator()
    def __nonzero__(*args, **kwargs):
        """__nonzero__(self) -> bool"""
        return _iorange.StringVector___nonzero__(*args, **kwargs)

    def __len__(*args, **kwargs):
        """__len__(self) -> size_type"""
        return _iorange.StringVector___len__(*args, **kwargs)

    def pop(*args, **kwargs):
        """pop(self) -> value_type"""
        return _iorange.StringVector_pop(*args, **kwargs)

    def __getslice__(*args, **kwargs):
        """__getslice__(self, i, j) -> StringVector"""
        return _iorange.StringVector___getslice__(*args, **kwargs)

    def __setslice__(*args, **kwargs):
        """__setslice__(self, i, j, v)"""
        return _iorange.StringVector___setslice__(*args, **kwargs)

    def __delslice__(*args, **kwargs):
        """__delslice__(self, i, j)"""
        return _iorange.StringVector___delslice__(*args, **kwargs)

    def __delitem__(*args, **kwargs):
        """__delitem__(self, i)"""
        return _iorange.StringVector___delitem__(*args, **kwargs)

    def __getitem__(*args, **kwargs):
        """__getitem__(self, i) -> value_type"""
        return _iorange.StringVector___getitem__(*args, **kwargs)

    def __setitem__(*args, **kwargs):
        """__setitem__(self, i, x)"""
        return _iorange.StringVector___setitem__(*args, **kwargs)

    def append(*args, **kwargs):
        """append(self, x)"""
        return _iorange.StringVector_append(*args, **kwargs)

    def empty(*args, **kwargs):
        """empty(self) -> bool"""
        return _iorange.StringVector_empty(*args, **kwargs)

    def size(*args, **kwargs):
        """size(self) -> size_type"""
        return _iorange.StringVector_size(*args, **kwargs)

    def clear(*args, **kwargs):
        """clear(self)"""
        return _iorange.StringVector_clear(*args, **kwargs)

    def swap(*args, **kwargs):
        """swap(self, v)"""
        return _iorange.StringVector_swap(*args, **kwargs)

    def get_allocator(*args, **kwargs):
        """get_allocator(self) -> allocator_type"""
        return _iorange.StringVector_get_allocator(*args, **kwargs)

    def begin(*args, **kwargs):
        """begin(self) -> const_iterator"""
        return _iorange.StringVector_begin(*args, **kwargs)

    def end(*args, **kwargs):
        """end(self) -> const_iterator"""
        return _iorange.StringVector_end(*args, **kwargs)

    def rbegin(*args, **kwargs):
        """rbegin(self) -> const_reverse_iterator"""
        return _iorange.StringVector_rbegin(*args, **kwargs)

    def rend(*args, **kwargs):
        """rend(self) -> const_reverse_iterator"""
        return _iorange.StringVector_rend(*args, **kwargs)

    def pop_back(*args, **kwargs):
        """pop_back(self)"""
        return _iorange.StringVector_pop_back(*args, **kwargs)

    def erase(*args):
        """
        erase(self, pos) -> iterator
        erase(self, first, last) -> iterator
        """
        return _iorange.StringVector_erase(*args)

    def __init__(self, *args): 
        """
        __init__(self) -> StringVector
        __init__(self, ?) -> StringVector
        __init__(self, size) -> StringVector
        __init__(self, size, value) -> StringVector
        """
        this = _iorange.new_StringVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(*args, **kwargs):
        """push_back(self, x)"""
        return _iorange.StringVector_push_back(*args, **kwargs)

    def front(*args, **kwargs):
        """front(self) -> value_type"""
        return _iorange.StringVector_front(*args, **kwargs)

    def back(*args, **kwargs):
        """back(self) -> value_type"""
        return _iorange.StringVector_back(*args, **kwargs)

    def assign(*args, **kwargs):
        """assign(self, n, x)"""
        return _iorange.StringVector_assign(*args, **kwargs)

    def resize(*args):
        """
        resize(self, new_size)
        resize(self, new_size, x)
        """
        return _iorange.StringVector_resize(*args)

    def insert(*args):
        """
        insert(self, pos, x) -> iterator
        insert(self, pos, n, x)
        """
        return _iorange.StringVector_insert(*args)

    def reserve(*args, **kwargs):
        """reserve(self, n)"""
        return _iorange.StringVector_reserve(*args, **kwargs)

    def capacity(*args, **kwargs):
        """capacity(self) -> size_type"""
        return _iorange.StringVector_capacity(*args, **kwargs)

    __swig_destroy__ = _iorange.delete_StringVector
StringVector_swigregister = _iorange.StringVector_swigregister
StringVector_swigregister(StringVector)

class StringList(object):
    """Proxy of C++ StringList class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def iterator(*args, **kwargs):
        """iterator(self, PYTHON_SELF) -> PySwigIterator"""
        return _iorange.StringList_iterator(*args, **kwargs)

    def __iter__(self): return self.iterator()
    def __nonzero__(*args, **kwargs):
        """__nonzero__(self) -> bool"""
        return _iorange.StringList___nonzero__(*args, **kwargs)

    def __len__(*args, **kwargs):
        """__len__(self) -> size_type"""
        return _iorange.StringList___len__(*args, **kwargs)

    def pop(*args, **kwargs):
        """pop(self) -> value_type"""
        return _iorange.StringList_pop(*args, **kwargs)

    def __getslice__(*args, **kwargs):
        """__getslice__(self, i, j) -> StringList"""
        return _iorange.StringList___getslice__(*args, **kwargs)

    def __setslice__(*args, **kwargs):
        """__setslice__(self, i, j, v)"""
        return _iorange.StringList___setslice__(*args, **kwargs)

    def __delslice__(*args, **kwargs):
        """__delslice__(self, i, j)"""
        return _iorange.StringList___delslice__(*args, **kwargs)

    def __delitem__(*args, **kwargs):
        """__delitem__(self, i)"""
        return _iorange.StringList___delitem__(*args, **kwargs)

    def __getitem__(*args, **kwargs):
        """__getitem__(self, i) -> value_type"""
        return _iorange.StringList___getitem__(*args, **kwargs)

    def __setitem__(*args, **kwargs):
        """__setitem__(self, i, x)"""
        return _iorange.StringList___setitem__(*args, **kwargs)

    def append(*args, **kwargs):
        """append(self, x)"""
        return _iorange.StringList_append(*args, **kwargs)

    def empty(*args, **kwargs):
        """empty(self) -> bool"""
        return _iorange.StringList_empty(*args, **kwargs)

    def size(*args, **kwargs):
        """size(self) -> size_type"""
        return _iorange.StringList_size(*args, **kwargs)

    def clear(*args, **kwargs):
        """clear(self)"""
        return _iorange.StringList_clear(*args, **kwargs)

    def swap(*args, **kwargs):
        """swap(self, v)"""
        return _iorange.StringList_swap(*args, **kwargs)

    def get_allocator(*args, **kwargs):
        """get_allocator(self) -> allocator_type"""
        return _iorange.StringList_get_allocator(*args, **kwargs)

    def begin(*args, **kwargs):
        """begin(self) -> const_iterator"""
        return _iorange.StringList_begin(*args, **kwargs)

    def end(*args, **kwargs):
        """end(self) -> const_iterator"""
        return _iorange.StringList_end(*args, **kwargs)

    def rbegin(*args, **kwargs):
        """rbegin(self) -> const_reverse_iterator"""
        return _iorange.StringList_rbegin(*args, **kwargs)

    def rend(*args, **kwargs):
        """rend(self) -> const_reverse_iterator"""
        return _iorange.StringList_rend(*args, **kwargs)

    def pop_back(*args, **kwargs):
        """pop_back(self)"""
        return _iorange.StringList_pop_back(*args, **kwargs)

    def erase(*args):
        """
        erase(self, pos) -> iterator
        erase(self, first, last) -> iterator
        """
        return _iorange.StringList_erase(*args)

    def __init__(self, *args): 
        """
        __init__(self) -> StringList
        __init__(self, ?) -> StringList
        __init__(self, size) -> StringList
        __init__(self, size, value) -> StringList
        """
        this = _iorange.new_StringList(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(*args, **kwargs):
        """push_back(self, x)"""
        return _iorange.StringList_push_back(*args, **kwargs)

    def front(*args, **kwargs):
        """front(self) -> value_type"""
        return _iorange.StringList_front(*args, **kwargs)

    def back(*args, **kwargs):
        """back(self) -> value_type"""
        return _iorange.StringList_back(*args, **kwargs)

    def assign(*args, **kwargs):
        """assign(self, n, x)"""
        return _iorange.StringList_assign(*args, **kwargs)

    def resize(*args):
        """
        resize(self, new_size)
        resize(self, new_size, x)
        """
        return _iorange.StringList_resize(*args)

    def insert(*args):
        """
        insert(self, pos, x) -> iterator
        insert(self, pos, n, x)
        """
        return _iorange.StringList_insert(*args)

    def pop_front(*args, **kwargs):
        """pop_front(self)"""
        return _iorange.StringList_pop_front(*args, **kwargs)

    def push_front(*args, **kwargs):
        """push_front(self, x)"""
        return _iorange.StringList_push_front(*args, **kwargs)

    def reverse(*args, **kwargs):
        """reverse(self)"""
        return _iorange.StringList_reverse(*args, **kwargs)

    __swig_destroy__ = _iorange.delete_StringList
StringList_swigregister = _iorange.StringList_swigregister
StringList_swigregister(StringList)

class StringSet(object):
    """Proxy of C++ StringSet class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def iterator(*args, **kwargs):
        """iterator(self, PYTHON_SELF) -> PySwigIterator"""
        return _iorange.StringSet_iterator(*args, **kwargs)

    def __iter__(self): return self.iterator()
    def __nonzero__(*args, **kwargs):
        """__nonzero__(self) -> bool"""
        return _iorange.StringSet___nonzero__(*args, **kwargs)

    def __len__(*args, **kwargs):
        """__len__(self) -> size_type"""
        return _iorange.StringSet___len__(*args, **kwargs)

    def append(*args, **kwargs):
        """append(self, x)"""
        return _iorange.StringSet_append(*args, **kwargs)

    def __contains__(*args, **kwargs):
        """__contains__(self, x) -> bool"""
        return _iorange.StringSet___contains__(*args, **kwargs)

    def __getitem__(*args, **kwargs):
        """__getitem__(self, i) -> value_type"""
        return _iorange.StringSet___getitem__(*args, **kwargs)

    def __init__(self, *args): 
        """
        __init__(self, ?) -> StringSet
        __init__(self) -> StringSet
        __init__(self, ?) -> StringSet
        """
        this = _iorange.new_StringSet(*args)
        try: self.this.append(this)
        except: self.this = this
    def empty(*args, **kwargs):
        """empty(self) -> bool"""
        return _iorange.StringSet_empty(*args, **kwargs)

    def size(*args, **kwargs):
        """size(self) -> size_type"""
        return _iorange.StringSet_size(*args, **kwargs)

    def clear(*args, **kwargs):
        """clear(self)"""
        return _iorange.StringSet_clear(*args, **kwargs)

    def swap(*args, **kwargs):
        """swap(self, v)"""
        return _iorange.StringSet_swap(*args, **kwargs)

    def count(*args, **kwargs):
        """count(self, x) -> size_type"""
        return _iorange.StringSet_count(*args, **kwargs)

    def begin(*args, **kwargs):
        """begin(self) -> iterator"""
        return _iorange.StringSet_begin(*args, **kwargs)

    def end(*args, **kwargs):
        """end(self) -> iterator"""
        return _iorange.StringSet_end(*args, **kwargs)

    def rbegin(*args, **kwargs):
        """rbegin(self) -> reverse_iterator"""
        return _iorange.StringSet_rbegin(*args, **kwargs)

    def rend(*args, **kwargs):
        """rend(self) -> reverse_iterator"""
        return _iorange.StringSet_rend(*args, **kwargs)

    def erase(*args):
        """
        erase(self, x) -> size_type
        erase(self, pos)
        erase(self, first, last)
        """
        return _iorange.StringSet_erase(*args)

    def find(*args, **kwargs):
        """find(self, x) -> iterator"""
        return _iorange.StringSet_find(*args, **kwargs)

    def lower_bound(*args, **kwargs):
        """lower_bound(self, x) -> iterator"""
        return _iorange.StringSet_lower_bound(*args, **kwargs)

    def upper_bound(*args, **kwargs):
        """upper_bound(self, x) -> iterator"""
        return _iorange.StringSet_upper_bound(*args, **kwargs)

    def equal_range(*args, **kwargs):
        """equal_range(self, x) -> std::pair<(std::set<(std::string)>::iterator,std::set<(std::string)>::iterator)>"""
        return _iorange.StringSet_equal_range(*args, **kwargs)

    def insert(*args, **kwargs):
        """insert(self, __x) -> std::pair<(std::set<(std::string)>::iterator,bool)>"""
        return _iorange.StringSet_insert(*args, **kwargs)

    __swig_destroy__ = _iorange.delete_StringSet
StringSet_swigregister = _iorange.StringSet_swigregister
StringSet_swigregister(StringSet)

class StringMap(object):
    """Proxy of C++ StringMap class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def iterator(*args, **kwargs):
        """iterator(self, PYTHON_SELF) -> PySwigIterator"""
        return _iorange.StringMap_iterator(*args, **kwargs)

    def __iter__(self): return self.iterator()
    def __nonzero__(*args, **kwargs):
        """__nonzero__(self) -> bool"""
        return _iorange.StringMap___nonzero__(*args, **kwargs)

    def __len__(*args, **kwargs):
        """__len__(self) -> size_type"""
        return _iorange.StringMap___len__(*args, **kwargs)

    def __getitem__(*args, **kwargs):
        """__getitem__(self, key) -> mapped_type"""
        return _iorange.StringMap___getitem__(*args, **kwargs)

    def __delitem__(*args, **kwargs):
        """__delitem__(self, key)"""
        return _iorange.StringMap___delitem__(*args, **kwargs)

    def has_key(*args, **kwargs):
        """has_key(self, key) -> bool"""
        return _iorange.StringMap_has_key(*args, **kwargs)

    def keys(*args, **kwargs):
        """keys(self) -> PyObject"""
        return _iorange.StringMap_keys(*args, **kwargs)

    def values(*args, **kwargs):
        """values(self) -> PyObject"""
        return _iorange.StringMap_values(*args, **kwargs)

    def items(*args, **kwargs):
        """items(self) -> PyObject"""
        return _iorange.StringMap_items(*args, **kwargs)

    def __contains__(*args, **kwargs):
        """__contains__(self, key) -> bool"""
        return _iorange.StringMap___contains__(*args, **kwargs)

    def key_iterator(*args, **kwargs):
        """key_iterator(self, PYTHON_SELF) -> PySwigIterator"""
        return _iorange.StringMap_key_iterator(*args, **kwargs)

    def value_iterator(*args, **kwargs):
        """value_iterator(self, PYTHON_SELF) -> PySwigIterator"""
        return _iorange.StringMap_value_iterator(*args, **kwargs)

    def __iter__(self): return self.key_iterator()
    def iterkeys(self): return self.key_iterator()
    def itervalues(self): return self.value_iterator()
    def iteritems(self): return self.iterator()
    def __setitem__(*args, **kwargs):
        """__setitem__(self, key, x)"""
        return _iorange.StringMap___setitem__(*args, **kwargs)

    def __init__(self, *args): 
        """
        __init__(self, ?) -> StringMap
        __init__(self) -> StringMap
        __init__(self, ?) -> StringMap
        """
        this = _iorange.new_StringMap(*args)
        try: self.this.append(this)
        except: self.this = this
    def empty(*args, **kwargs):
        """empty(self) -> bool"""
        return _iorange.StringMap_empty(*args, **kwargs)

    def size(*args, **kwargs):
        """size(self) -> size_type"""
        return _iorange.StringMap_size(*args, **kwargs)

    def clear(*args, **kwargs):
        """clear(self)"""
        return _iorange.StringMap_clear(*args, **kwargs)

    def swap(*args, **kwargs):
        """swap(self, v)"""
        return _iorange.StringMap_swap(*args, **kwargs)

    def get_allocator(*args, **kwargs):
        """get_allocator(self) -> allocator_type"""
        return _iorange.StringMap_get_allocator(*args, **kwargs)

    def begin(*args, **kwargs):
        """begin(self) -> const_iterator"""
        return _iorange.StringMap_begin(*args, **kwargs)

    def end(*args, **kwargs):
        """end(self) -> const_iterator"""
        return _iorange.StringMap_end(*args, **kwargs)

    def rbegin(*args, **kwargs):
        """rbegin(self) -> const_reverse_iterator"""
        return _iorange.StringMap_rbegin(*args, **kwargs)

    def rend(*args, **kwargs):
        """rend(self) -> const_reverse_iterator"""
        return _iorange.StringMap_rend(*args, **kwargs)

    def count(*args, **kwargs):
        """count(self, x) -> size_type"""
        return _iorange.StringMap_count(*args, **kwargs)

    def erase(*args):
        """
        erase(self, x) -> size_type
        erase(self, position)
        erase(self, first, last)
        """
        return _iorange.StringMap_erase(*args)

    def find(*args, **kwargs):
        """find(self, x) -> iterator"""
        return _iorange.StringMap_find(*args, **kwargs)

    def lower_bound(*args, **kwargs):
        """lower_bound(self, x) -> iterator"""
        return _iorange.StringMap_lower_bound(*args, **kwargs)

    def upper_bound(*args, **kwargs):
        """upper_bound(self, x) -> iterator"""
        return _iorange.StringMap_upper_bound(*args, **kwargs)

    __swig_destroy__ = _iorange.delete_StringMap
StringMap_swigregister = _iorange.StringMap_swigregister
StringMap_swigregister(StringMap)

class StringStringPair(object):
    """Proxy of C++ StringStringPair class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> StringStringPair
        __init__(self, first, second) -> StringStringPair
        __init__(self, p) -> StringStringPair
        """
        this = _iorange.new_StringStringPair(*args)
        try: self.this.append(this)
        except: self.this = this
    first = _swig_property(_iorange.StringStringPair_first_get, _iorange.StringStringPair_first_set)
    second = _swig_property(_iorange.StringStringPair_second_get, _iorange.StringStringPair_second_set)
    def __len__(self): return 2
    def __repr__(self): return str((self.first, self.second))
    def __getitem__(self, index): 
      if not (index % 2): 
        return self.first
      else:
        return self.second
    def __setitem__(self, index, val):
      if not (index % 2): 
        self.first = val
      else:
        self.second = val
    __swig_destroy__ = _iorange.delete_StringStringPair
StringStringPair_swigregister = _iorange.StringStringPair_swigregister
StringStringPair_swigregister(StringStringPair)

class StringStringList(object):
    """Proxy of C++ StringStringList class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def iterator(*args, **kwargs):
        """iterator(self, PYTHON_SELF) -> PySwigIterator"""
        return _iorange.StringStringList_iterator(*args, **kwargs)

    def __iter__(self): return self.iterator()
    def __nonzero__(*args, **kwargs):
        """__nonzero__(self) -> bool"""
        return _iorange.StringStringList___nonzero__(*args, **kwargs)

    def __len__(*args, **kwargs):
        """__len__(self) -> size_type"""
        return _iorange.StringStringList___len__(*args, **kwargs)

    def pop(*args, **kwargs):
        """pop(self) -> value_type"""
        return _iorange.StringStringList_pop(*args, **kwargs)

    def __getslice__(*args, **kwargs):
        """__getslice__(self, i, j) -> StringStringList"""
        return _iorange.StringStringList___getslice__(*args, **kwargs)

    def __setslice__(*args, **kwargs):
        """__setslice__(self, i, j, v)"""
        return _iorange.StringStringList___setslice__(*args, **kwargs)

    def __delslice__(*args, **kwargs):
        """__delslice__(self, i, j)"""
        return _iorange.StringStringList___delslice__(*args, **kwargs)

    def __delitem__(*args, **kwargs):
        """__delitem__(self, i)"""
        return _iorange.StringStringList___delitem__(*args, **kwargs)

    def __getitem__(*args, **kwargs):
        """__getitem__(self, i) -> value_type"""
        return _iorange.StringStringList___getitem__(*args, **kwargs)

    def __setitem__(*args, **kwargs):
        """__setitem__(self, i, x)"""
        return _iorange.StringStringList___setitem__(*args, **kwargs)

    def append(*args, **kwargs):
        """append(self, x)"""
        return _iorange.StringStringList_append(*args, **kwargs)

    def empty(*args, **kwargs):
        """empty(self) -> bool"""
        return _iorange.StringStringList_empty(*args, **kwargs)

    def size(*args, **kwargs):
        """size(self) -> size_type"""
        return _iorange.StringStringList_size(*args, **kwargs)

    def clear(*args, **kwargs):
        """clear(self)"""
        return _iorange.StringStringList_clear(*args, **kwargs)

    def swap(*args, **kwargs):
        """swap(self, v)"""
        return _iorange.StringStringList_swap(*args, **kwargs)

    def get_allocator(*args, **kwargs):
        """get_allocator(self) -> allocator_type"""
        return _iorange.StringStringList_get_allocator(*args, **kwargs)

    def begin(*args, **kwargs):
        """begin(self) -> const_iterator"""
        return _iorange.StringStringList_begin(*args, **kwargs)

    def end(*args, **kwargs):
        """end(self) -> const_iterator"""
        return _iorange.StringStringList_end(*args, **kwargs)

    def rbegin(*args, **kwargs):
        """rbegin(self) -> const_reverse_iterator"""
        return _iorange.StringStringList_rbegin(*args, **kwargs)

    def rend(*args, **kwargs):
        """rend(self) -> const_reverse_iterator"""
        return _iorange.StringStringList_rend(*args, **kwargs)

    def pop_back(*args, **kwargs):
        """pop_back(self)"""
        return _iorange.StringStringList_pop_back(*args, **kwargs)

    def erase(*args):
        """
        erase(self, pos) -> iterator
        erase(self, first, last) -> iterator
        """
        return _iorange.StringStringList_erase(*args)

    def __init__(self, *args): 
        """
        __init__(self) -> StringStringList
        __init__(self, ?) -> StringStringList
        __init__(self, size) -> StringStringList
        __init__(self, size, value) -> StringStringList
        """
        this = _iorange.new_StringStringList(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(*args, **kwargs):
        """push_back(self, x)"""
        return _iorange.StringStringList_push_back(*args, **kwargs)

    def front(*args, **kwargs):
        """front(self) -> value_type"""
        return _iorange.StringStringList_front(*args, **kwargs)

    def back(*args, **kwargs):
        """back(self) -> value_type"""
        return _iorange.StringStringList_back(*args, **kwargs)

    def assign(*args, **kwargs):
        """assign(self, n, x)"""
        return _iorange.StringStringList_assign(*args, **kwargs)

    def resize(*args):
        """
        resize(self, new_size)
        resize(self, new_size, x)
        """
        return _iorange.StringStringList_resize(*args)

    def insert(*args):
        """
        insert(self, pos, x) -> iterator
        insert(self, pos, n, x)
        """
        return _iorange.StringStringList_insert(*args)

    def reserve(*args, **kwargs):
        """reserve(self, n)"""
        return _iorange.StringStringList_reserve(*args, **kwargs)

    def capacity(*args, **kwargs):
        """capacity(self) -> size_type"""
        return _iorange.StringStringList_capacity(*args, **kwargs)

    __swig_destroy__ = _iorange.delete_StringStringList
StringStringList_swigregister = _iorange.StringStringList_swigregister
StringStringList_swigregister(StringStringList)

class StringMapList(object):
    """Proxy of C++ StringMapList class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def iterator(*args, **kwargs):
        """iterator(self, PYTHON_SELF) -> PySwigIterator"""
        return _iorange.StringMapList_iterator(*args, **kwargs)

    def __iter__(self): return self.iterator()
    def __nonzero__(*args, **kwargs):
        """__nonzero__(self) -> bool"""
        return _iorange.StringMapList___nonzero__(*args, **kwargs)

    def __len__(*args, **kwargs):
        """__len__(self) -> size_type"""
        return _iorange.StringMapList___len__(*args, **kwargs)

    def pop(*args, **kwargs):
        """pop(self) -> value_type"""
        return _iorange.StringMapList_pop(*args, **kwargs)

    def __getslice__(*args, **kwargs):
        """__getslice__(self, i, j) -> StringMapList"""
        return _iorange.StringMapList___getslice__(*args, **kwargs)

    def __setslice__(*args, **kwargs):
        """__setslice__(self, i, j, v)"""
        return _iorange.StringMapList___setslice__(*args, **kwargs)

    def __delslice__(*args, **kwargs):
        """__delslice__(self, i, j)"""
        return _iorange.StringMapList___delslice__(*args, **kwargs)

    def __delitem__(*args, **kwargs):
        """__delitem__(self, i)"""
        return _iorange.StringMapList___delitem__(*args, **kwargs)

    def __getitem__(*args, **kwargs):
        """__getitem__(self, i) -> value_type"""
        return _iorange.StringMapList___getitem__(*args, **kwargs)

    def __setitem__(*args, **kwargs):
        """__setitem__(self, i, x)"""
        return _iorange.StringMapList___setitem__(*args, **kwargs)

    def append(*args, **kwargs):
        """append(self, x)"""
        return _iorange.StringMapList_append(*args, **kwargs)

    def empty(*args, **kwargs):
        """empty(self) -> bool"""
        return _iorange.StringMapList_empty(*args, **kwargs)

    def size(*args, **kwargs):
        """size(self) -> size_type"""
        return _iorange.StringMapList_size(*args, **kwargs)

    def clear(*args, **kwargs):
        """clear(self)"""
        return _iorange.StringMapList_clear(*args, **kwargs)

    def swap(*args, **kwargs):
        """swap(self, v)"""
        return _iorange.StringMapList_swap(*args, **kwargs)

    def get_allocator(*args, **kwargs):
        """get_allocator(self) -> allocator_type"""
        return _iorange.StringMapList_get_allocator(*args, **kwargs)

    def begin(*args, **kwargs):
        """begin(self) -> const_iterator"""
        return _iorange.StringMapList_begin(*args, **kwargs)

    def end(*args, **kwargs):
        """end(self) -> const_iterator"""
        return _iorange.StringMapList_end(*args, **kwargs)

    def rbegin(*args, **kwargs):
        """rbegin(self) -> const_reverse_iterator"""
        return _iorange.StringMapList_rbegin(*args, **kwargs)

    def rend(*args, **kwargs):
        """rend(self) -> const_reverse_iterator"""
        return _iorange.StringMapList_rend(*args, **kwargs)

    def pop_back(*args, **kwargs):
        """pop_back(self)"""
        return _iorange.StringMapList_pop_back(*args, **kwargs)

    def erase(*args):
        """
        erase(self, pos) -> iterator
        erase(self, first, last) -> iterator
        """
        return _iorange.StringMapList_erase(*args)

    def __init__(self, *args): 
        """
        __init__(self) -> StringMapList
        __init__(self, ?) -> StringMapList
        __init__(self, size) -> StringMapList
        __init__(self, size, value) -> StringMapList
        """
        this = _iorange.new_StringMapList(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(*args, **kwargs):
        """push_back(self, x)"""
        return _iorange.StringMapList_push_back(*args, **kwargs)

    def front(*args, **kwargs):
        """front(self) -> value_type"""
        return _iorange.StringMapList_front(*args, **kwargs)

    def back(*args, **kwargs):
        """back(self) -> value_type"""
        return _iorange.StringMapList_back(*args, **kwargs)

    def assign(*args, **kwargs):
        """assign(self, n, x)"""
        return _iorange.StringMapList_assign(*args, **kwargs)

    def resize(*args):
        """
        resize(self, new_size)
        resize(self, new_size, x)
        """
        return _iorange.StringMapList_resize(*args)

    def insert(*args):
        """
        insert(self, pos, x) -> iterator
        insert(self, pos, n, x)
        """
        return _iorange.StringMapList_insert(*args)

    def reserve(*args, **kwargs):
        """reserve(self, n)"""
        return _iorange.StringMapList_reserve(*args, **kwargs)

    def capacity(*args, **kwargs):
        """capacity(self) -> size_type"""
        return _iorange.StringMapList_capacity(*args, **kwargs)

    __swig_destroy__ = _iorange.delete_StringMapList
StringMapList_swigregister = _iorange.StringMapList_swigregister
StringMapList_swigregister(StringMapList)

class StringIntPair(object):
    """Proxy of C++ StringIntPair class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> StringIntPair
        __init__(self, first, second) -> StringIntPair
        __init__(self, p) -> StringIntPair
        """
        this = _iorange.new_StringIntPair(*args)
        try: self.this.append(this)
        except: self.this = this
    first = _swig_property(_iorange.StringIntPair_first_get, _iorange.StringIntPair_first_set)
    second = _swig_property(_iorange.StringIntPair_second_get, _iorange.StringIntPair_second_set)
    def __len__(self): return 2
    def __repr__(self): return str((self.first, self.second))
    def __getitem__(self, index): 
      if not (index % 2): 
        return self.first
      else:
        return self.second
    def __setitem__(self, index, val):
      if not (index % 2): 
        self.first = val
      else:
        self.second = val
    __swig_destroy__ = _iorange.delete_StringIntPair
StringIntPair_swigregister = _iorange.StringIntPair_swigregister
StringIntPair_swigregister(StringIntPair)

class PairOfUInt32(object):
    """Proxy of C++ PairOfUInt32 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> PairOfUInt32
        __init__(self, first, second) -> PairOfUInt32
        __init__(self, p) -> PairOfUInt32
        """
        this = _iorange.new_PairOfUInt32(*args)
        try: self.this.append(this)
        except: self.this = this
    first = _swig_property(_iorange.PairOfUInt32_first_get, _iorange.PairOfUInt32_first_set)
    second = _swig_property(_iorange.PairOfUInt32_second_get, _iorange.PairOfUInt32_second_set)
    def __len__(self): return 2
    def __repr__(self): return str((self.first, self.second))
    def __getitem__(self, index): 
      if not (index % 2): 
        return self.first
      else:
        return self.second
    def __setitem__(self, index, val):
      if not (index % 2): 
        self.first = val
      else:
        self.second = val
    __swig_destroy__ = _iorange.delete_PairOfUInt32
PairOfUInt32_swigregister = _iorange.PairOfUInt32_swigregister
PairOfUInt32_swigregister(PairOfUInt32)

class VectorOfPairsOfUInt32(object):
    """Proxy of C++ VectorOfPairsOfUInt32 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def iterator(*args, **kwargs):
        """iterator(self, PYTHON_SELF) -> PySwigIterator"""
        return _iorange.VectorOfPairsOfUInt32_iterator(*args, **kwargs)

    def __iter__(self): return self.iterator()
    def __nonzero__(*args, **kwargs):
        """__nonzero__(self) -> bool"""
        return _iorange.VectorOfPairsOfUInt32___nonzero__(*args, **kwargs)

    def __len__(*args, **kwargs):
        """__len__(self) -> std::vector<(std::pair<(unsigned int,unsigned int)>)>::size_type"""
        return _iorange.VectorOfPairsOfUInt32___len__(*args, **kwargs)

    def pop(*args, **kwargs):
        """pop(self) -> std::vector<(std::pair<(unsigned int,unsigned int)>)>::value_type"""
        return _iorange.VectorOfPairsOfUInt32_pop(*args, **kwargs)

    def __getslice__(*args, **kwargs):
        """__getslice__(self, i, j) -> VectorOfPairsOfUInt32"""
        return _iorange.VectorOfPairsOfUInt32___getslice__(*args, **kwargs)

    def __setslice__(*args, **kwargs):
        """__setslice__(self, i, j, v)"""
        return _iorange.VectorOfPairsOfUInt32___setslice__(*args, **kwargs)

    def __delslice__(*args, **kwargs):
        """__delslice__(self, i, j)"""
        return _iorange.VectorOfPairsOfUInt32___delslice__(*args, **kwargs)

    def __delitem__(*args, **kwargs):
        """__delitem__(self, i)"""
        return _iorange.VectorOfPairsOfUInt32___delitem__(*args, **kwargs)

    def __getitem__(*args, **kwargs):
        """__getitem__(self, i) -> std::vector<(std::pair<(unsigned int,unsigned int)>)>::value_type"""
        return _iorange.VectorOfPairsOfUInt32___getitem__(*args, **kwargs)

    def __setitem__(*args, **kwargs):
        """__setitem__(self, i, x)"""
        return _iorange.VectorOfPairsOfUInt32___setitem__(*args, **kwargs)

    def append(*args, **kwargs):
        """append(self, x)"""
        return _iorange.VectorOfPairsOfUInt32_append(*args, **kwargs)

    def empty(*args, **kwargs):
        """empty(self) -> bool"""
        return _iorange.VectorOfPairsOfUInt32_empty(*args, **kwargs)

    def size(*args, **kwargs):
        """size(self) -> std::vector<(std::pair<(unsigned int,unsigned int)>)>::size_type"""
        return _iorange.VectorOfPairsOfUInt32_size(*args, **kwargs)

    def clear(*args, **kwargs):
        """clear(self)"""
        return _iorange.VectorOfPairsOfUInt32_clear(*args, **kwargs)

    def swap(*args, **kwargs):
        """swap(self, v)"""
        return _iorange.VectorOfPairsOfUInt32_swap(*args, **kwargs)

    def get_allocator(*args, **kwargs):
        """get_allocator(self) -> std::vector<(std::pair<(unsigned int,unsigned int)>)>::allocator_type"""
        return _iorange.VectorOfPairsOfUInt32_get_allocator(*args, **kwargs)

    def begin(*args, **kwargs):
        """begin(self) -> std::vector<(std::pair<(unsigned int,unsigned int)>)>::const_iterator"""
        return _iorange.VectorOfPairsOfUInt32_begin(*args, **kwargs)

    def end(*args, **kwargs):
        """end(self) -> std::vector<(std::pair<(unsigned int,unsigned int)>)>::const_iterator"""
        return _iorange.VectorOfPairsOfUInt32_end(*args, **kwargs)

    def rbegin(*args, **kwargs):
        """rbegin(self) -> std::vector<(std::pair<(unsigned int,unsigned int)>)>::const_reverse_iterator"""
        return _iorange.VectorOfPairsOfUInt32_rbegin(*args, **kwargs)

    def rend(*args, **kwargs):
        """rend(self) -> std::vector<(std::pair<(unsigned int,unsigned int)>)>::const_reverse_iterator"""
        return _iorange.VectorOfPairsOfUInt32_rend(*args, **kwargs)

    def pop_back(*args, **kwargs):
        """pop_back(self)"""
        return _iorange.VectorOfPairsOfUInt32_pop_back(*args, **kwargs)

    def erase(*args):
        """
        erase(self, pos) -> std::vector<(std::pair<(unsigned int,unsigned int)>)>::iterator
        erase(self, first, last) -> std::vector<(std::pair<(unsigned int,unsigned int)>)>::iterator
        """
        return _iorange.VectorOfPairsOfUInt32_erase(*args)

    def __init__(self, *args): 
        """
        __init__(self) -> VectorOfPairsOfUInt32
        __init__(self, ?) -> VectorOfPairsOfUInt32
        __init__(self, size) -> VectorOfPairsOfUInt32
        __init__(self, size, value) -> VectorOfPairsOfUInt32
        """
        this = _iorange.new_VectorOfPairsOfUInt32(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(*args, **kwargs):
        """push_back(self, x)"""
        return _iorange.VectorOfPairsOfUInt32_push_back(*args, **kwargs)

    def front(*args, **kwargs):
        """front(self) -> std::vector<(std::pair<(unsigned int,unsigned int)>)>::value_type"""
        return _iorange.VectorOfPairsOfUInt32_front(*args, **kwargs)

    def back(*args, **kwargs):
        """back(self) -> std::vector<(std::pair<(unsigned int,unsigned int)>)>::value_type"""
        return _iorange.VectorOfPairsOfUInt32_back(*args, **kwargs)

    def assign(*args, **kwargs):
        """assign(self, n, x)"""
        return _iorange.VectorOfPairsOfUInt32_assign(*args, **kwargs)

    def resize(*args):
        """
        resize(self, new_size)
        resize(self, new_size, x)
        """
        return _iorange.VectorOfPairsOfUInt32_resize(*args)

    def insert(*args):
        """
        insert(self, pos, x) -> std::vector<(std::pair<(unsigned int,unsigned int)>)>::iterator
        insert(self, pos, n, x)
        """
        return _iorange.VectorOfPairsOfUInt32_insert(*args)

    def reserve(*args, **kwargs):
        """reserve(self, n)"""
        return _iorange.VectorOfPairsOfUInt32_reserve(*args, **kwargs)

    def capacity(*args, **kwargs):
        """capacity(self) -> std::vector<(std::pair<(unsigned int,unsigned int)>)>::size_type"""
        return _iorange.VectorOfPairsOfUInt32_capacity(*args, **kwargs)

    __swig_destroy__ = _iorange.delete_VectorOfPairsOfUInt32
VectorOfPairsOfUInt32_swigregister = _iorange.VectorOfPairsOfUInt32_swigregister
VectorOfPairsOfUInt32_swigregister(VectorOfPairsOfUInt32)

class VectorOfVectorsOfPairsOfUInt32(object):
    """Proxy of C++ VectorOfVectorsOfPairsOfUInt32 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def iterator(*args, **kwargs):
        """iterator(self, PYTHON_SELF) -> PySwigIterator"""
        return _iorange.VectorOfVectorsOfPairsOfUInt32_iterator(*args, **kwargs)

    def __iter__(self): return self.iterator()
    def __nonzero__(*args, **kwargs):
        """__nonzero__(self) -> bool"""
        return _iorange.VectorOfVectorsOfPairsOfUInt32___nonzero__(*args, **kwargs)

    def __len__(*args, **kwargs):
        """__len__(self) -> std::vector<(std::vector<(std::pair<(unsigned int,unsigned int)>)>)>::size_type"""
        return _iorange.VectorOfVectorsOfPairsOfUInt32___len__(*args, **kwargs)

    def pop(*args, **kwargs):
        """pop(self) -> std::vector<(std::vector<(std::pair<(unsigned int,unsigned int)>)>)>::value_type"""
        return _iorange.VectorOfVectorsOfPairsOfUInt32_pop(*args, **kwargs)

    def __getslice__(*args, **kwargs):
        """__getslice__(self, i, j) -> VectorOfVectorsOfPairsOfUInt32"""
        return _iorange.VectorOfVectorsOfPairsOfUInt32___getslice__(*args, **kwargs)

    def __setslice__(*args, **kwargs):
        """__setslice__(self, i, j, v)"""
        return _iorange.VectorOfVectorsOfPairsOfUInt32___setslice__(*args, **kwargs)

    def __delslice__(*args, **kwargs):
        """__delslice__(self, i, j)"""
        return _iorange.VectorOfVectorsOfPairsOfUInt32___delslice__(*args, **kwargs)

    def __delitem__(*args, **kwargs):
        """__delitem__(self, i)"""
        return _iorange.VectorOfVectorsOfPairsOfUInt32___delitem__(*args, **kwargs)

    def __getitem__(*args, **kwargs):
        """__getitem__(self, i) -> std::vector<(std::vector<(std::pair<(unsigned int,unsigned int)>)>)>::value_type"""
        return _iorange.VectorOfVectorsOfPairsOfUInt32___getitem__(*args, **kwargs)

    def __setitem__(*args, **kwargs):
        """__setitem__(self, i, x)"""
        return _iorange.VectorOfVectorsOfPairsOfUInt32___setitem__(*args, **kwargs)

    def append(*args, **kwargs):
        """append(self, x)"""
        return _iorange.VectorOfVectorsOfPairsOfUInt32_append(*args, **kwargs)

    def empty(*args, **kwargs):
        """empty(self) -> bool"""
        return _iorange.VectorOfVectorsOfPairsOfUInt32_empty(*args, **kwargs)

    def size(*args, **kwargs):
        """size(self) -> std::vector<(std::vector<(std::pair<(unsigned int,unsigned int)>)>)>::size_type"""
        return _iorange.VectorOfVectorsOfPairsOfUInt32_size(*args, **kwargs)

    def clear(*args, **kwargs):
        """clear(self)"""
        return _iorange.VectorOfVectorsOfPairsOfUInt32_clear(*args, **kwargs)

    def swap(*args, **kwargs):
        """swap(self, v)"""
        return _iorange.VectorOfVectorsOfPairsOfUInt32_swap(*args, **kwargs)

    def get_allocator(*args, **kwargs):
        """get_allocator(self) -> std::vector<(std::vector<(std::pair<(unsigned int,unsigned int)>)>)>::allocator_type"""
        return _iorange.VectorOfVectorsOfPairsOfUInt32_get_allocator(*args, **kwargs)

    def begin(*args, **kwargs):
        """begin(self) -> std::vector<(std::vector<(std::pair<(unsigned int,unsigned int)>)>)>::const_iterator"""
        return _iorange.VectorOfVectorsOfPairsOfUInt32_begin(*args, **kwargs)

    def end(*args, **kwargs):
        """end(self) -> std::vector<(std::vector<(std::pair<(unsigned int,unsigned int)>)>)>::const_iterator"""
        return _iorange.VectorOfVectorsOfPairsOfUInt32_end(*args, **kwargs)

    def rbegin(*args, **kwargs):
        """rbegin(self) -> std::vector<(std::vector<(std::pair<(unsigned int,unsigned int)>)>)>::const_reverse_iterator"""
        return _iorange.VectorOfVectorsOfPairsOfUInt32_rbegin(*args, **kwargs)

    def rend(*args, **kwargs):
        """rend(self) -> std::vector<(std::vector<(std::pair<(unsigned int,unsigned int)>)>)>::const_reverse_iterator"""
        return _iorange.VectorOfVectorsOfPairsOfUInt32_rend(*args, **kwargs)

    def pop_back(*args, **kwargs):
        """pop_back(self)"""
        return _iorange.VectorOfVectorsOfPairsOfUInt32_pop_back(*args, **kwargs)

    def erase(*args):
        """
        erase(self, pos) -> std::vector<(std::vector<(std::pair<(unsigned int,unsigned int)>)>)>::iterator
        erase(self, first, last) -> std::vector<(std::vector<(std::pair<(unsigned int,unsigned int)>)>)>::iterator
        """
        return _iorange.VectorOfVectorsOfPairsOfUInt32_erase(*args)

    def __init__(self, *args): 
        """
        __init__(self) -> VectorOfVectorsOfPairsOfUInt32
        __init__(self, ?) -> VectorOfVectorsOfPairsOfUInt32
        __init__(self, size) -> VectorOfVectorsOfPairsOfUInt32
        __init__(self, size, value) -> VectorOfVectorsOfPairsOfUInt32
        """
        this = _iorange.new_VectorOfVectorsOfPairsOfUInt32(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(*args, **kwargs):
        """push_back(self, x)"""
        return _iorange.VectorOfVectorsOfPairsOfUInt32_push_back(*args, **kwargs)

    def front(*args, **kwargs):
        """front(self) -> std::vector<(std::vector<(std::pair<(unsigned int,unsigned int)>)>)>::value_type"""
        return _iorange.VectorOfVectorsOfPairsOfUInt32_front(*args, **kwargs)

    def back(*args, **kwargs):
        """back(self) -> std::vector<(std::vector<(std::pair<(unsigned int,unsigned int)>)>)>::value_type"""
        return _iorange.VectorOfVectorsOfPairsOfUInt32_back(*args, **kwargs)

    def assign(*args, **kwargs):
        """assign(self, n, x)"""
        return _iorange.VectorOfVectorsOfPairsOfUInt32_assign(*args, **kwargs)

    def resize(*args):
        """
        resize(self, new_size)
        resize(self, new_size, x)
        """
        return _iorange.VectorOfVectorsOfPairsOfUInt32_resize(*args)

    def insert(*args):
        """
        insert(self, pos, x) -> std::vector<(std::vector<(std::pair<(unsigned int,unsigned int)>)>)>::iterator
        insert(self, pos, n, x)
        """
        return _iorange.VectorOfVectorsOfPairsOfUInt32_insert(*args)

    def reserve(*args, **kwargs):
        """reserve(self, n)"""
        return _iorange.VectorOfVectorsOfPairsOfUInt32_reserve(*args, **kwargs)

    def capacity(*args, **kwargs):
        """capacity(self) -> std::vector<(std::vector<(std::pair<(unsigned int,unsigned int)>)>)>::size_type"""
        return _iorange.VectorOfVectorsOfPairsOfUInt32_capacity(*args, **kwargs)

    __swig_destroy__ = _iorange.delete_VectorOfVectorsOfPairsOfUInt32
VectorOfVectorsOfPairsOfUInt32_swigregister = _iorange.VectorOfVectorsOfPairsOfUInt32_swigregister
VectorOfVectorsOfPairsOfUInt32_swigregister(VectorOfVectorsOfPairsOfUInt32)

class PairUInt32Real32(object):
    """Proxy of C++ PairUInt32Real32 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> PairUInt32Real32
        __init__(self, first, second) -> PairUInt32Real32
        __init__(self, p) -> PairUInt32Real32
        """
        this = _iorange.new_PairUInt32Real32(*args)
        try: self.this.append(this)
        except: self.this = this
    first = _swig_property(_iorange.PairUInt32Real32_first_get, _iorange.PairUInt32Real32_first_set)
    second = _swig_property(_iorange.PairUInt32Real32_second_get, _iorange.PairUInt32Real32_second_set)
    def __len__(self): return 2
    def __repr__(self): return str((self.first, self.second))
    def __getitem__(self, index): 
      if not (index % 2): 
        return self.first
      else:
        return self.second
    def __setitem__(self, index, val):
      if not (index % 2): 
        self.first = val
      else:
        self.second = val
    __swig_destroy__ = _iorange.delete_PairUInt32Real32
PairUInt32Real32_swigregister = _iorange.PairUInt32Real32_swigregister
PairUInt32Real32_swigregister(PairUInt32Real32)

class PairUInt32Real64(object):
    """Proxy of C++ PairUInt32Real64 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> PairUInt32Real64
        __init__(self, first, second) -> PairUInt32Real64
        __init__(self, p) -> PairUInt32Real64
        """
        this = _iorange.new_PairUInt32Real64(*args)
        try: self.this.append(this)
        except: self.this = this
    first = _swig_property(_iorange.PairUInt32Real64_first_get, _iorange.PairUInt32Real64_first_set)
    second = _swig_property(_iorange.PairUInt32Real64_second_get, _iorange.PairUInt32Real64_second_set)
    def __len__(self): return 2
    def __repr__(self): return str((self.first, self.second))
    def __getitem__(self, index): 
      if not (index % 2): 
        return self.first
      else:
        return self.second
    def __setitem__(self, index, val):
      if not (index % 2): 
        self.first = val
      else:
        self.second = val
    __swig_destroy__ = _iorange.delete_PairUInt32Real64
PairUInt32Real64_swigregister = _iorange.PairUInt32Real64_swigregister
PairUInt32Real64_swigregister(PairUInt32Real64)

class VectorOfPairsUInt32Real32(object):
    """Proxy of C++ VectorOfPairsUInt32Real32 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def iterator(*args, **kwargs):
        """iterator(self, PYTHON_SELF) -> PySwigIterator"""
        return _iorange.VectorOfPairsUInt32Real32_iterator(*args, **kwargs)

    def __iter__(self): return self.iterator()
    def __nonzero__(*args, **kwargs):
        """__nonzero__(self) -> bool"""
        return _iorange.VectorOfPairsUInt32Real32___nonzero__(*args, **kwargs)

    def __len__(*args, **kwargs):
        """__len__(self) -> std::vector<(std::pair<(unsigned int,float)>)>::size_type"""
        return _iorange.VectorOfPairsUInt32Real32___len__(*args, **kwargs)

    def pop(*args, **kwargs):
        """pop(self) -> std::vector<(std::pair<(unsigned int,float)>)>::value_type"""
        return _iorange.VectorOfPairsUInt32Real32_pop(*args, **kwargs)

    def __getslice__(*args, **kwargs):
        """__getslice__(self, i, j) -> VectorOfPairsUInt32Real32"""
        return _iorange.VectorOfPairsUInt32Real32___getslice__(*args, **kwargs)

    def __setslice__(*args, **kwargs):
        """__setslice__(self, i, j, v)"""
        return _iorange.VectorOfPairsUInt32Real32___setslice__(*args, **kwargs)

    def __delslice__(*args, **kwargs):
        """__delslice__(self, i, j)"""
        return _iorange.VectorOfPairsUInt32Real32___delslice__(*args, **kwargs)

    def __delitem__(*args, **kwargs):
        """__delitem__(self, i)"""
        return _iorange.VectorOfPairsUInt32Real32___delitem__(*args, **kwargs)

    def __getitem__(*args, **kwargs):
        """__getitem__(self, i) -> std::vector<(std::pair<(unsigned int,float)>)>::value_type"""
        return _iorange.VectorOfPairsUInt32Real32___getitem__(*args, **kwargs)

    def __setitem__(*args, **kwargs):
        """__setitem__(self, i, x)"""
        return _iorange.VectorOfPairsUInt32Real32___setitem__(*args, **kwargs)

    def append(*args, **kwargs):
        """append(self, x)"""
        return _iorange.VectorOfPairsUInt32Real32_append(*args, **kwargs)

    def empty(*args, **kwargs):
        """empty(self) -> bool"""
        return _iorange.VectorOfPairsUInt32Real32_empty(*args, **kwargs)

    def size(*args, **kwargs):
        """size(self) -> std::vector<(std::pair<(unsigned int,float)>)>::size_type"""
        return _iorange.VectorOfPairsUInt32Real32_size(*args, **kwargs)

    def clear(*args, **kwargs):
        """clear(self)"""
        return _iorange.VectorOfPairsUInt32Real32_clear(*args, **kwargs)

    def swap(*args, **kwargs):
        """swap(self, v)"""
        return _iorange.VectorOfPairsUInt32Real32_swap(*args, **kwargs)

    def get_allocator(*args, **kwargs):
        """get_allocator(self) -> std::vector<(std::pair<(unsigned int,float)>)>::allocator_type"""
        return _iorange.VectorOfPairsUInt32Real32_get_allocator(*args, **kwargs)

    def begin(*args, **kwargs):
        """begin(self) -> std::vector<(std::pair<(unsigned int,float)>)>::const_iterator"""
        return _iorange.VectorOfPairsUInt32Real32_begin(*args, **kwargs)

    def end(*args, **kwargs):
        """end(self) -> std::vector<(std::pair<(unsigned int,float)>)>::const_iterator"""
        return _iorange.VectorOfPairsUInt32Real32_end(*args, **kwargs)

    def rbegin(*args, **kwargs):
        """rbegin(self) -> std::vector<(std::pair<(unsigned int,float)>)>::const_reverse_iterator"""
        return _iorange.VectorOfPairsUInt32Real32_rbegin(*args, **kwargs)

    def rend(*args, **kwargs):
        """rend(self) -> std::vector<(std::pair<(unsigned int,float)>)>::const_reverse_iterator"""
        return _iorange.VectorOfPairsUInt32Real32_rend(*args, **kwargs)

    def pop_back(*args, **kwargs):
        """pop_back(self)"""
        return _iorange.VectorOfPairsUInt32Real32_pop_back(*args, **kwargs)

    def erase(*args):
        """
        erase(self, pos) -> std::vector<(std::pair<(unsigned int,float)>)>::iterator
        erase(self, first, last) -> std::vector<(std::pair<(unsigned int,float)>)>::iterator
        """
        return _iorange.VectorOfPairsUInt32Real32_erase(*args)

    def __init__(self, *args): 
        """
        __init__(self) -> VectorOfPairsUInt32Real32
        __init__(self, ?) -> VectorOfPairsUInt32Real32
        __init__(self, size) -> VectorOfPairsUInt32Real32
        __init__(self, size, value) -> VectorOfPairsUInt32Real32
        """
        this = _iorange.new_VectorOfPairsUInt32Real32(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(*args, **kwargs):
        """push_back(self, x)"""
        return _iorange.VectorOfPairsUInt32Real32_push_back(*args, **kwargs)

    def front(*args, **kwargs):
        """front(self) -> std::vector<(std::pair<(unsigned int,float)>)>::value_type"""
        return _iorange.VectorOfPairsUInt32Real32_front(*args, **kwargs)

    def back(*args, **kwargs):
        """back(self) -> std::vector<(std::pair<(unsigned int,float)>)>::value_type"""
        return _iorange.VectorOfPairsUInt32Real32_back(*args, **kwargs)

    def assign(*args, **kwargs):
        """assign(self, n, x)"""
        return _iorange.VectorOfPairsUInt32Real32_assign(*args, **kwargs)

    def resize(*args):
        """
        resize(self, new_size)
        resize(self, new_size, x)
        """
        return _iorange.VectorOfPairsUInt32Real32_resize(*args)

    def insert(*args):
        """
        insert(self, pos, x) -> std::vector<(std::pair<(unsigned int,float)>)>::iterator
        insert(self, pos, n, x)
        """
        return _iorange.VectorOfPairsUInt32Real32_insert(*args)

    def reserve(*args, **kwargs):
        """reserve(self, n)"""
        return _iorange.VectorOfPairsUInt32Real32_reserve(*args, **kwargs)

    def capacity(*args, **kwargs):
        """capacity(self) -> std::vector<(std::pair<(unsigned int,float)>)>::size_type"""
        return _iorange.VectorOfPairsUInt32Real32_capacity(*args, **kwargs)

    __swig_destroy__ = _iorange.delete_VectorOfPairsUInt32Real32
VectorOfPairsUInt32Real32_swigregister = _iorange.VectorOfPairsUInt32Real32_swigregister
VectorOfPairsUInt32Real32_swigregister(VectorOfPairsUInt32Real32)

class VectorOfPairsUInt32Real64(object):
    """Proxy of C++ VectorOfPairsUInt32Real64 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def iterator(*args, **kwargs):
        """iterator(self, PYTHON_SELF) -> PySwigIterator"""
        return _iorange.VectorOfPairsUInt32Real64_iterator(*args, **kwargs)

    def __iter__(self): return self.iterator()
    def __nonzero__(*args, **kwargs):
        """__nonzero__(self) -> bool"""
        return _iorange.VectorOfPairsUInt32Real64___nonzero__(*args, **kwargs)

    def __len__(*args, **kwargs):
        """__len__(self) -> std::vector<(std::pair<(unsigned int,double)>)>::size_type"""
        return _iorange.VectorOfPairsUInt32Real64___len__(*args, **kwargs)

    def pop(*args, **kwargs):
        """pop(self) -> std::vector<(std::pair<(unsigned int,double)>)>::value_type"""
        return _iorange.VectorOfPairsUInt32Real64_pop(*args, **kwargs)

    def __getslice__(*args, **kwargs):
        """__getslice__(self, i, j) -> VectorOfPairsUInt32Real64"""
        return _iorange.VectorOfPairsUInt32Real64___getslice__(*args, **kwargs)

    def __setslice__(*args, **kwargs):
        """__setslice__(self, i, j, v)"""
        return _iorange.VectorOfPairsUInt32Real64___setslice__(*args, **kwargs)

    def __delslice__(*args, **kwargs):
        """__delslice__(self, i, j)"""
        return _iorange.VectorOfPairsUInt32Real64___delslice__(*args, **kwargs)

    def __delitem__(*args, **kwargs):
        """__delitem__(self, i)"""
        return _iorange.VectorOfPairsUInt32Real64___delitem__(*args, **kwargs)

    def __getitem__(*args, **kwargs):
        """__getitem__(self, i) -> std::vector<(std::pair<(unsigned int,double)>)>::value_type"""
        return _iorange.VectorOfPairsUInt32Real64___getitem__(*args, **kwargs)

    def __setitem__(*args, **kwargs):
        """__setitem__(self, i, x)"""
        return _iorange.VectorOfPairsUInt32Real64___setitem__(*args, **kwargs)

    def append(*args, **kwargs):
        """append(self, x)"""
        return _iorange.VectorOfPairsUInt32Real64_append(*args, **kwargs)

    def empty(*args, **kwargs):
        """empty(self) -> bool"""
        return _iorange.VectorOfPairsUInt32Real64_empty(*args, **kwargs)

    def size(*args, **kwargs):
        """size(self) -> std::vector<(std::pair<(unsigned int,double)>)>::size_type"""
        return _iorange.VectorOfPairsUInt32Real64_size(*args, **kwargs)

    def clear(*args, **kwargs):
        """clear(self)"""
        return _iorange.VectorOfPairsUInt32Real64_clear(*args, **kwargs)

    def swap(*args, **kwargs):
        """swap(self, v)"""
        return _iorange.VectorOfPairsUInt32Real64_swap(*args, **kwargs)

    def get_allocator(*args, **kwargs):
        """get_allocator(self) -> std::vector<(std::pair<(unsigned int,double)>)>::allocator_type"""
        return _iorange.VectorOfPairsUInt32Real64_get_allocator(*args, **kwargs)

    def begin(*args, **kwargs):
        """begin(self) -> std::vector<(std::pair<(unsigned int,double)>)>::const_iterator"""
        return _iorange.VectorOfPairsUInt32Real64_begin(*args, **kwargs)

    def end(*args, **kwargs):
        """end(self) -> std::vector<(std::pair<(unsigned int,double)>)>::const_iterator"""
        return _iorange.VectorOfPairsUInt32Real64_end(*args, **kwargs)

    def rbegin(*args, **kwargs):
        """rbegin(self) -> std::vector<(std::pair<(unsigned int,double)>)>::const_reverse_iterator"""
        return _iorange.VectorOfPairsUInt32Real64_rbegin(*args, **kwargs)

    def rend(*args, **kwargs):
        """rend(self) -> std::vector<(std::pair<(unsigned int,double)>)>::const_reverse_iterator"""
        return _iorange.VectorOfPairsUInt32Real64_rend(*args, **kwargs)

    def pop_back(*args, **kwargs):
        """pop_back(self)"""
        return _iorange.VectorOfPairsUInt32Real64_pop_back(*args, **kwargs)

    def erase(*args):
        """
        erase(self, pos) -> std::vector<(std::pair<(unsigned int,double)>)>::iterator
        erase(self, first, last) -> std::vector<(std::pair<(unsigned int,double)>)>::iterator
        """
        return _iorange.VectorOfPairsUInt32Real64_erase(*args)

    def __init__(self, *args): 
        """
        __init__(self) -> VectorOfPairsUInt32Real64
        __init__(self, ?) -> VectorOfPairsUInt32Real64
        __init__(self, size) -> VectorOfPairsUInt32Real64
        __init__(self, size, value) -> VectorOfPairsUInt32Real64
        """
        this = _iorange.new_VectorOfPairsUInt32Real64(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(*args, **kwargs):
        """push_back(self, x)"""
        return _iorange.VectorOfPairsUInt32Real64_push_back(*args, **kwargs)

    def front(*args, **kwargs):
        """front(self) -> std::vector<(std::pair<(unsigned int,double)>)>::value_type"""
        return _iorange.VectorOfPairsUInt32Real64_front(*args, **kwargs)

    def back(*args, **kwargs):
        """back(self) -> std::vector<(std::pair<(unsigned int,double)>)>::value_type"""
        return _iorange.VectorOfPairsUInt32Real64_back(*args, **kwargs)

    def assign(*args, **kwargs):
        """assign(self, n, x)"""
        return _iorange.VectorOfPairsUInt32Real64_assign(*args, **kwargs)

    def resize(*args):
        """
        resize(self, new_size)
        resize(self, new_size, x)
        """
        return _iorange.VectorOfPairsUInt32Real64_resize(*args)

    def insert(*args):
        """
        insert(self, pos, x) -> std::vector<(std::pair<(unsigned int,double)>)>::iterator
        insert(self, pos, n, x)
        """
        return _iorange.VectorOfPairsUInt32Real64_insert(*args)

    def reserve(*args, **kwargs):
        """reserve(self, n)"""
        return _iorange.VectorOfPairsUInt32Real64_reserve(*args, **kwargs)

    def capacity(*args, **kwargs):
        """capacity(self) -> std::vector<(std::pair<(unsigned int,double)>)>::size_type"""
        return _iorange.VectorOfPairsUInt32Real64_capacity(*args, **kwargs)

    __swig_destroy__ = _iorange.delete_VectorOfPairsUInt32Real64
VectorOfPairsUInt32Real64_swigregister = _iorange.VectorOfPairsUInt32Real64_swigregister
VectorOfPairsUInt32Real64_swigregister(VectorOfPairsUInt32Real64)


def GetBasicTypeFromName(*args, **kwargs):
  """
    GetBasicTypeFromName(type) -> NTA_BasicType

    GetBasicTypeFromName(typeName) -> int

    Internal use.
    Finds a base type enumeration given a type name.

    """
  return _iorange.GetBasicTypeFromName(*args, **kwargs)

def GetBasicTypeSize(*args, **kwargs):
  """
    GetBasicTypeSize(type) -> size_t

    GetBasicTypeFromName(typeName) -> int

    Internal use.
    Gets the number of bytes use to specify the named
    type in C code.

    """
  return _iorange.GetBasicTypeSize(*args, **kwargs)
import numpy
def GetNumpyDataType(typeName):
  """Gets the numpy dtype associated with a particular NuPIC 
  base type name. The only supported type name is 
  'NTA_Real', which returns a numpy dtype of numpy.float32.
  The returned value can be used with numpy functions like
  numpy.array(..., dtype=dtype) and numpy.astype(..., dtype=dtype).
  """
  if typeName == "NTA_Real": return numpy.float32
  elif typeName == "NTA_Real32": return numpy.float32
  elif typeName == "NTA_Real64": return numpy.float64
  #elif typeName == "NTA_Real128": return numpy.float128
  else: raise RuntimeError("Unsupported type name.")

def GetNTARealType():
  """Gets the name of the NuPIC floating point base type, 
  which is used for most internal calculations.
  This base type name can be used with GetBasicTypeFromName(),
  GetBasicTypeSize(), and GetNumpyDataType().
  """
  return "NTA_Real"
def GetNTAReal():
  """Gets the numpy dtype of the NuPIC floating point base type,
  which is used for most internal calculations.
  The returned value can be used with numpy functions like
  numpy.array(..., dtype=dtype) and numpy.astype(..., dtype=dtype).
  """
  return GetNumpyDataType(GetNTARealType())

class NumpyArray(object):
    """Proxy of C++ NumpyArray class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _iorange.delete_NumpyArray
    def init(*args, **kwargs):
        """init()"""
        return _iorange.NumpyArray_init(*args, **kwargs)

    init = staticmethod(init)
    def numDimensions(*args, **kwargs):
        """numDimensions(self) -> int"""
        return _iorange.NumpyArray_numDimensions(*args, **kwargs)

    def getRank(*args, **kwargs):
        """getRank(self) -> int"""
        return _iorange.NumpyArray_getRank(*args, **kwargs)

    def dimension(*args, **kwargs):
        """dimension(self, i) -> int"""
        return _iorange.NumpyArray_dimension(*args, **kwargs)

    def getDims(*args, **kwargs):
        """getDims(self, ?)"""
        return _iorange.NumpyArray_getDims(*args, **kwargs)

    def size(*args, **kwargs):
        """size(self) -> int"""
        return _iorange.NumpyArray_size(*args, **kwargs)

    def forPython(*args, **kwargs):
        """forPython(self) -> PyObject"""
        return _iorange.NumpyArray_forPython(*args, **kwargs)

NumpyArray_swigregister = _iorange.NumpyArray_swigregister
NumpyArray_swigregister(NumpyArray)

def LookupNumpyDType(*args):
  """
    LookupNumpyDType(?) -> int
    LookupNumpyDType(?) -> int
    LookupNumpyDType(?) -> int
    LookupNumpyDType(?) -> int
    LookupNumpyDType(?) -> int
    LookupNumpyDType(?) -> int
    LookupNumpyDType(?) -> int
    LookupNumpyDType(?) -> int
    LookupNumpyDType(?) -> int
    LookupNumpyDType(?) -> int
    """
  return _iorange.LookupNumpyDType(*args)

def NumpyArray_init(*args):
  """NumpyArray_init()"""
  return _iorange.NumpyArray_init(*args)

class WrappedVector(object):
    """Proxy of C++ WrappedVector class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def checkIndex(*args, **kwargs):
        """checkIndex(self, i)"""
        return _iorange.WrappedVector_checkIndex(*args, **kwargs)

    def checkBeginEnd(*args, **kwargs):
        """checkBeginEnd(self, begin, end)"""
        return _iorange.WrappedVector_checkBeginEnd(*args, **kwargs)

    def __init__(self, *args): 
        """
        __init__(self, n) -> WrappedVector
        __init__(self) -> WrappedVector
        __init__(self, p) -> WrappedVector
        __init__(self, size, p) -> WrappedVector
        __init__(self, v) -> WrappedVector
        __init__(self, v) -> WrappedVector
        """
        this = _iorange.new_WrappedVector(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _iorange.delete_WrappedVector
    def wvector(*args, **kwargs):
        """wvector(self, lag=0) -> WrappedVector"""
        return _iorange.WrappedVector_wvector(*args, **kwargs)

    def clear(*args, **kwargs):
        """clear(self)"""
        return _iorange.WrappedVector_clear(*args, **kwargs)

    def setPointer(*args):
        """
        setPointer(self, n, incr, p)
        setPointer(self, n, p)
        """
        return _iorange.WrappedVector_setPointer(*args)

    def getBufPtrAsInt(*args, **kwargs):
        """getBufPtrAsInt(self) -> int"""
        return _iorange.WrappedVector_getBufPtrAsInt(*args, **kwargs)

    def begin(*args, **kwargs):
        """begin(self) -> iterator"""
        return _iorange.WrappedVector_begin(*args, **kwargs)

    def end(*args, **kwargs):
        """end(self) -> iterator"""
        return _iorange.WrappedVector_end(*args, **kwargs)

    def __len__(*args, **kwargs):
        """__len__(self) -> Size"""
        return _iorange.WrappedVector___len__(*args, **kwargs)

    def __getitem__(*args, **kwargs):
        """__getitem__(self, i) -> Real"""
        return _iorange.WrappedVector___getitem__(*args, **kwargs)

    def __setitem__(*args, **kwargs):
        """__setitem__(self, i, x)"""
        return _iorange.WrappedVector___setitem__(*args, **kwargs)

    def __repr__(*args, **kwargs):
        """__repr__(self) -> string"""
        return _iorange.WrappedVector___repr__(*args, **kwargs)

    def __str__(*args, **kwargs):
        """__str__(self) -> string"""
        return _iorange.WrappedVector___str__(*args, **kwargs)

    def slice(*args):
        """
        slice(self, i, j) -> WrappedVector
        slice(self, start, stop, step, length) -> WrappedVector
        """
        return _iorange.WrappedVector_slice(*args)

    def __reversed__(*args, **kwargs):
        """__reversed__(self) -> WrappedVector"""
        return _iorange.WrappedVector___reversed__(*args, **kwargs)

    def reverse(*args, **kwargs):
        """reverse(self)"""
        return _iorange.WrappedVector_reverse(*args, **kwargs)

    def sort(*args, **kwargs):
        """sort(self, descending=False)"""
        return _iorange.WrappedVector_sort(*args, **kwargs)

    def __iadd__(*args, **kwargs):
        """__iadd__(self, v)"""
        return _iorange.WrappedVector___iadd__(*args, **kwargs)

    def __imul__(*args, **kwargs):
        """__imul__(self, v)"""
        return _iorange.WrappedVector___imul__(*args, **kwargs)

    def copyFrom(*args, **kwargs):
        """copyFrom(self, v)"""
        return _iorange.WrappedVector_copyFrom(*args, **kwargs)

    def setSlice(*args, **kwargs):
        """setSlice(self, i, j, v)"""
        return _iorange.WrappedVector_setSlice(*args, **kwargs)

    def __iter__(*args, **kwargs):
        """__iter__(self) -> WrappedVector"""
        return _iorange.WrappedVector___iter__(*args, **kwargs)

    def next(*args, **kwargs):
        """next(self) -> WrappedVector"""
        return _iorange.WrappedVector_next(*args, **kwargs)

    def fill(*args, **kwargs):
        """fill(self, x)"""
        return _iorange.WrappedVector_fill(*args, **kwargs)

    def argmax(*args, **kwargs):
        """argmax(self) -> int"""
        return _iorange.WrappedVector_argmax(*args, **kwargs)

    def sum(*args, **kwargs):
        """sum(self) -> Real"""
        return _iorange.WrappedVector_sum(*args, **kwargs)

    def sumSq(*args, **kwargs):
        """sumSq(self) -> Real"""
        return _iorange.WrappedVector_sumSq(*args, **kwargs)

    def any(*args, **kwargs):
        """any(self) -> bool"""
        return _iorange.WrappedVector_any(*args, **kwargs)

    def all(*args, **kwargs):
        """all(self) -> Real"""
        return _iorange.WrappedVector_all(*args, **kwargs)

    def setFromArray(*args, **kwargs):
        """setFromArray(self, parray)"""
        return _iorange.WrappedVector_setFromArray(*args, **kwargs)

    def copyFromPointer(*args, **kwargs):
        """copyFromPointer(self, n, obj)"""
        return _iorange.WrappedVector_copyFromPointer(*args, **kwargs)

    def copyFromArray(*args, **kwargs):
        """copyFromArray(self, obj)"""
        return _iorange.WrappedVector_copyFromArray(*args, **kwargs)

    def __getslice__(*args, **kwargs):
        """__getslice__(self, i, j) -> WrappedVector"""
        return _iorange.WrappedVector___getslice__(*args, **kwargs)

    def __setslice__(*args, **kwargs):
        """__setslice__(self, i, j, obj)"""
        return _iorange.WrappedVector___setslice__(*args, **kwargs)

    def array(*args, **kwargs):
        """array(self) -> PyObject"""
        return _iorange.WrappedVector_array(*args, **kwargs)

WrappedVector_swigregister = _iorange.WrappedVector_swigregister
WrappedVector_swigregister(WrappedVector)

class WrappedVectorList(object):
    """Proxy of C++ WrappedVectorList class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def iterator(*args, **kwargs):
        """iterator(self, PYTHON_SELF) -> PySwigIterator"""
        return _iorange.WrappedVectorList_iterator(*args, **kwargs)

    def __iter__(self): return self.iterator()
    def __nonzero__(*args, **kwargs):
        """__nonzero__(self) -> bool"""
        return _iorange.WrappedVectorList___nonzero__(*args, **kwargs)

    def __len__(*args, **kwargs):
        """__len__(self) -> size_type"""
        return _iorange.WrappedVectorList___len__(*args, **kwargs)

    def pop(*args, **kwargs):
        """pop(self) -> value_type"""
        return _iorange.WrappedVectorList_pop(*args, **kwargs)

    def __getslice__(*args, **kwargs):
        """__getslice__(self, i, j) -> WrappedVectorList"""
        return _iorange.WrappedVectorList___getslice__(*args, **kwargs)

    def __setslice__(*args, **kwargs):
        """__setslice__(self, i, j, v)"""
        return _iorange.WrappedVectorList___setslice__(*args, **kwargs)

    def __delslice__(*args, **kwargs):
        """__delslice__(self, i, j)"""
        return _iorange.WrappedVectorList___delslice__(*args, **kwargs)

    def __delitem__(*args, **kwargs):
        """__delitem__(self, i)"""
        return _iorange.WrappedVectorList___delitem__(*args, **kwargs)

    def __getitem__(*args, **kwargs):
        """__getitem__(self, i) -> value_type"""
        return _iorange.WrappedVectorList___getitem__(*args, **kwargs)

    def __setitem__(*args, **kwargs):
        """__setitem__(self, i, x)"""
        return _iorange.WrappedVectorList___setitem__(*args, **kwargs)

    def append(*args, **kwargs):
        """append(self, x)"""
        return _iorange.WrappedVectorList_append(*args, **kwargs)

    def empty(*args, **kwargs):
        """empty(self) -> bool"""
        return _iorange.WrappedVectorList_empty(*args, **kwargs)

    def size(*args, **kwargs):
        """size(self) -> size_type"""
        return _iorange.WrappedVectorList_size(*args, **kwargs)

    def clear(*args, **kwargs):
        """clear(self)"""
        return _iorange.WrappedVectorList_clear(*args, **kwargs)

    def swap(*args, **kwargs):
        """swap(self, v)"""
        return _iorange.WrappedVectorList_swap(*args, **kwargs)

    def get_allocator(*args, **kwargs):
        """get_allocator(self) -> allocator_type"""
        return _iorange.WrappedVectorList_get_allocator(*args, **kwargs)

    def begin(*args, **kwargs):
        """begin(self) -> const_iterator"""
        return _iorange.WrappedVectorList_begin(*args, **kwargs)

    def end(*args, **kwargs):
        """end(self) -> const_iterator"""
        return _iorange.WrappedVectorList_end(*args, **kwargs)

    def rbegin(*args, **kwargs):
        """rbegin(self) -> const_reverse_iterator"""
        return _iorange.WrappedVectorList_rbegin(*args, **kwargs)

    def rend(*args, **kwargs):
        """rend(self) -> const_reverse_iterator"""
        return _iorange.WrappedVectorList_rend(*args, **kwargs)

    def pop_back(*args, **kwargs):
        """pop_back(self)"""
        return _iorange.WrappedVectorList_pop_back(*args, **kwargs)

    def erase(*args):
        """
        erase(self, pos) -> iterator
        erase(self, first, last) -> iterator
        """
        return _iorange.WrappedVectorList_erase(*args)

    def __init__(self, *args): 
        """
        __init__(self) -> WrappedVectorList
        __init__(self, ?) -> WrappedVectorList
        __init__(self, size) -> WrappedVectorList
        __init__(self, size, value) -> WrappedVectorList
        """
        this = _iorange.new_WrappedVectorList(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(*args, **kwargs):
        """push_back(self, x)"""
        return _iorange.WrappedVectorList_push_back(*args, **kwargs)

    def front(*args, **kwargs):
        """front(self) -> value_type"""
        return _iorange.WrappedVectorList_front(*args, **kwargs)

    def back(*args, **kwargs):
        """back(self) -> value_type"""
        return _iorange.WrappedVectorList_back(*args, **kwargs)

    def assign(*args, **kwargs):
        """assign(self, n, x)"""
        return _iorange.WrappedVectorList_assign(*args, **kwargs)

    def resize(*args):
        """
        resize(self, new_size)
        resize(self, new_size, x)
        """
        return _iorange.WrappedVectorList_resize(*args)

    def insert(*args):
        """
        insert(self, pos, x) -> iterator
        insert(self, pos, n, x)
        """
        return _iorange.WrappedVectorList_insert(*args)

    def reserve(*args, **kwargs):
        """reserve(self, n)"""
        return _iorange.WrappedVectorList_reserve(*args, **kwargs)

    def capacity(*args, **kwargs):
        """capacity(self) -> size_type"""
        return _iorange.WrappedVectorList_capacity(*args, **kwargs)

    __swig_destroy__ = _iorange.delete_WrappedVectorList
WrappedVectorList_swigregister = _iorange.WrappedVectorList_swigregister
WrappedVectorList_swigregister(WrappedVectorList)



